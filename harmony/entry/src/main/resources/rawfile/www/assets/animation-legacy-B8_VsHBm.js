System.register(["./index-legacy-CGN9q4W7.js"],(function(e,t){"use strict";var o;return{setters:[e=>{o=e.r}],execute:function(){
/*!
             * (C) Ionic http://ionicframework.com - MIT License
             */
let t;const n=(e,o,n)=>{const r=o.startsWith("animation")?(e=>{if(void 0===t){const o=void 0!==e.style.animationName,n=void 0!==e.style.webkitAnimationName;t=!o&&n?"-webkit-":""}return t})(e):"";e.style.setProperty(r+o,n)},r=(e=[],t)=>{if(void 0!==t){const o=Array.isArray(t)?t:[t];return[...e,...o]}return e};e("c",(e=>{let t,a,i,s,f,l,c,d,h,u,p,g=[],m=[],v=[],E=!1,y={},A=[],b=[],C={},T=0,S=!1,k=!1,w=!0,D=!1,F=!0,R=!1;const x=e,I=[],K=[],N=[],P=[],W=[],L=[],M=[],O=[],j=[],q=[],z=[],B="function"==typeof AnimationEffect||void 0!==o&&"function"==typeof o.AnimationEffect,G="function"==typeof Element&&"function"==typeof Element.prototype.animate&&B,H=()=>z,J=e=>{X(),e&&Y()},Q=(e,t)=>{const o=t.findIndex((t=>t.c===e));o>-1&&t.splice(o,1)},U=(e,t)=>(((null==t?void 0:t.oneTimeCallback)?K:I).push({c:e,o:t}),p),V=()=>(I.length=0,K.length=0,p),X=()=>{G&&(z.forEach((e=>{e.cancel()})),z.length=0)},Y=()=>{L.forEach((e=>{(null==e?void 0:e.parentNode)&&e.parentNode.removeChild(e)})),L.length=0},Z=()=>void 0!==f?f:c?c.getFill():"both",$=()=>void 0!==d?d:void 0!==l?l:c?c.getDirection():"normal",_=()=>S?"linear":void 0!==i?i:c?c.getEasing():"linear",ee=()=>k?0:void 0!==h?h:void 0!==a?a:c?c.getDuration():0,te=()=>void 0!==s?s:c?c.getIterations():1,oe=()=>void 0!==u?u:void 0!==t?t:c?c.getDelay():0,ne=e=>{G&&H().forEach((t=>{const o=t.effect;if(o.setKeyframes)o.setKeyframes(e);else{const n=new KeyframeEffect(o.target,e,o.getTiming());t.effect=n}}))},re=()=>{0!==T&&(T--,0===T&&((()=>{j.forEach((e=>e())),q.forEach((e=>e()));const e=w?1:0,t=A,o=b,r=C;P.forEach((e=>{const a=e.classList;t.forEach((e=>a.add(e))),o.forEach((e=>a.remove(e)));for(const t in r)r.hasOwnProperty(t)&&n(e,t,r[t])})),h=void 0,d=void 0,u=void 0,I.forEach((t=>t.c(e,p))),K.forEach((t=>t.c(e,p))),K.length=0,F=!0,w&&(D=!0),w=!0})(),c&&c.animationFinish()))},ae=()=>{(()=>{M.forEach((e=>e())),O.forEach((e=>e()));const e=m,t=v,o=y;P.forEach((r=>{const a=r.classList;e.forEach((e=>a.add(e))),t.forEach((e=>a.remove(e)));for(const e in o)o.hasOwnProperty(e)&&n(r,e,o[e])}))})(),g.length>0&&G&&(P.forEach((e=>{const t=e.animate(g,{id:x,delay:oe(),duration:ee(),easing:_(),iterations:te(),fill:Z(),direction:$()});t.pause(),z.push(t)})),z.length>0&&(z[0].onfinish=()=>{re()})),E=!0},ie=e=>{e=Math.min(Math.max(e,0),.9999),G&&z.forEach((t=>{t.currentTime=t.effect.getComputedTiming().delay+ee()*e,t.pause()}))},se=e=>{z.forEach((e=>{e.effect.updateTiming({delay:oe(),duration:ee(),easing:_(),iterations:te(),fill:Z(),direction:$()})})),void 0!==e&&ie(e)},fe=(e=!1,t=!0,o)=>(e&&W.forEach((n=>{n.update(e,t,o)})),G&&se(o),p),le=()=>{E&&(G?z.forEach((e=>{e.pause()})):P.forEach((e=>{n(e,"animation-play-state","paused")})),R=!0)},ce=e=>new Promise((t=>{(null==e?void 0:e.sync)&&(k=!0,U((()=>k=!1),{oneTimeCallback:!0})),E||ae(),D&&(G&&(ie(0),se()),D=!1),F&&(T=W.length+1,F=!1);const o=()=>{Q(n,K),t()},n=()=>{Q(o,N),t()};U(n,{oneTimeCallback:!0}),((e,t)=>{N.push({c:e,o:t})})(o,{oneTimeCallback:!0}),W.forEach((e=>{e.play()})),G?(z.forEach((e=>{e.play()})),0!==g.length&&0!==P.length||re()):re(),R=!1})),de=(e,t)=>{const o=g[0];return void 0===o||void 0!==o.offset&&0!==o.offset?g=[{offset:0,[e]:t},...g]:o[e]=t,p};return p={parentAnimation:c,elements:P,childAnimations:W,id:x,animationFinish:re,from:de,to:(e,t)=>{const o=g[g.length-1];return void 0===o||void 0!==o.offset&&1!==o.offset?g=[...g,{offset:1,[e]:t}]:o[e]=t,p},fromTo:(e,t,o)=>de(e,t).to(e,o),parent:e=>(c=e,p),play:ce,pause:()=>(W.forEach((e=>{e.pause()})),le(),p),stop:()=>{W.forEach((e=>{e.stop()})),E&&(X(),E=!1),S=!1,k=!1,F=!0,d=void 0,h=void 0,u=void 0,T=0,D=!1,w=!0,R=!1,N.forEach((e=>e.c(0,p))),N.length=0},destroy:e=>(W.forEach((t=>{t.destroy(e)})),J(e),P.length=0,W.length=0,g.length=0,V(),E=!1,F=!0,p),keyframes:e=>{const t=g!==e;return g=e,t&&ne(g),p},addAnimation:e=>{if(null!=e)if(Array.isArray(e))for(const t of e)t.parent(p),W.push(t);else e.parent(p),W.push(e);return p},addElement:e=>{if(null!=e)if(1===e.nodeType)P.push(e);else if(e.length>=0)for(let t=0;t<e.length;t++)P.push(e[t]);else console.error("Invalid addElement value");return p},update:fe,fill:e=>(f=e,fe(!0),p),direction:e=>(l=e,fe(!0),p),iterations:e=>(s=e,fe(!0),p),duration:e=>(G||0!==e||(e=1),a=e,fe(!0),p),easing:e=>(i=e,fe(!0),p),delay:e=>(t=e,fe(!0),p),getWebAnimations:H,getKeyframes:()=>g,getFill:Z,getDirection:$,getDelay:oe,getIterations:te,getEasing:_,getDuration:ee,afterAddRead:e=>(j.push(e),p),afterAddWrite:e=>(q.push(e),p),afterClearStyles:(e=[])=>{for(const t of e)C[t]="";return p},afterStyles:(e={})=>(C=e,p),afterRemoveClass:e=>(b=r(b,e),p),afterAddClass:e=>(A=r(A,e),p),beforeAddRead:e=>(M.push(e),p),beforeAddWrite:e=>(O.push(e),p),beforeClearStyles:(e=[])=>{for(const t of e)y[t]="";return p},beforeStyles:(e={})=>(y=e,p),beforeRemoveClass:e=>(v=r(v,e),p),beforeAddClass:e=>(m=r(m,e),p),onFinish:U,isRunning:()=>0!==T&&!R,progressStart:(e=!1,t)=>(W.forEach((o=>{o.progressStart(e,t)})),le(),S=e,E||ae(),fe(!1,!0,t),p),progressStep:e=>(W.forEach((t=>{t.progressStep(e)})),ie(e),p),progressEnd:(e,t,o)=>(S=!1,W.forEach((n=>{n.progressEnd(e,t,o)})),void 0!==o&&(h=o),D=!1,w=!0,0===e?(d="reverse"===$()?"normal":"reverse","reverse"===d&&(w=!1),G?(fe(),ie(1-t)):(u=(1-t)*ee()*-1,fe(!1,!1))):1===e&&(G?(fe(),ie(t)):(u=t*ee()*-1,fe(!1,!1))),void 0===e||c||ce(),p)}}))}}}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
