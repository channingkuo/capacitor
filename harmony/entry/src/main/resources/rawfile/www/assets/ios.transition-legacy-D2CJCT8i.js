System.register(["./animation-legacy-B8_VsHBm.js","./index-legacy-CGN9q4W7.js"],(function(t,e){"use strict";var o,n;return{setters:[t=>{o=t.c},t=>{n=t.q}],execute:function(){
/*!
             * (C) Ionic http://ionicframework.com - MIT License
             */
const e=t=>document.querySelector(`${t}.ion-cloned-element`),r=t("shadow",(t=>t.shadowRoot||t)),a=t=>{const e="ION-TABS"===t.tagName?t:t.querySelector("ion-tabs"),o="ion-content ion-header:not(.header-collapse-condense-inactive) ion-title.title-large";if(null!=e){const t=e.querySelector("ion-tab:not(.tab-hidden), .ion-page:not(.ion-page-hidden)");return null!=t?t.querySelector(o):null}return t.querySelector(o)},l=(t,e)=>{const o="ION-TABS"===t.tagName?t:t.querySelector("ion-tabs");let n=[];if(null!=o){const t=o.querySelector("ion-tab:not(.tab-hidden), .ion-page:not(.ion-page-hidden)");null!=t&&(n=t.querySelectorAll("ion-buttons"))}else n=t.querySelectorAll("ion-buttons");for(const r of n){const t=r.closest("ion-header"),o=t&&!t.classList.contains("header-collapse-condense-inactive"),n=r.querySelector("ion-back-button"),a=r.classList.contains("buttons-collapse"),l="start"===r.slot||""===r.slot;if(null!==n&&l&&(a&&o&&e||!a))return n}return null},s=(t,n,a,l,s,i,d,f,m)=>{var y,u;const p=n?`calc(100% - ${s.right+4}px)`:s.left-4+"px",g=n?"right":"left",b=n?"left":"right",S=n?"right":"left";let h=1,$=1,q=`scale(${$})`;const x="scale(1)";if(i&&d){const t=(null===(y=i.textContent)||void 0===y?void 0:y.trim())===(null===(u=f.textContent)||void 0===u?void 0:u.trim());h=m.width/d.width,$=(m.height-c)/d.height,q=t?`scale(${h}, ${$})`:`scale(${$})`}const T=r(l).querySelector("ion-icon").getBoundingClientRect(),X=n?T.width/2-(T.right-s.right)+"px":s.left-T.width/2+"px",E=n?`-${window.innerWidth-s.right}px`:`${s.left}px`,A=`${m.top}px`,v=`${s.top}px`,C=a?[{offset:0,transform:`translate3d(${E}, ${v}, 0)`},{offset:1,transform:`translate3d(${X}, ${A}, 0)`}]:[{offset:0,transform:`translate3d(${X}, ${A}, 0)`},{offset:1,transform:`translate3d(${E}, ${v}, 0)`}],w=a?[{offset:0,opacity:1,transform:x},{offset:1,opacity:0,transform:q}]:[{offset:0,opacity:0,transform:q},{offset:1,opacity:1,transform:x}],k=a?[{offset:0,opacity:1,transform:"scale(1)"},{offset:.2,opacity:0,transform:"scale(0.6)"},{offset:1,opacity:0,transform:"scale(0.6)"}]:[{offset:0,opacity:0,transform:"scale(0.6)"},{offset:.6,opacity:0,transform:"scale(0.6)"},{offset:1,opacity:1,transform:"scale(1)"}],B=o(),P=o(),R=o(),W=e("ion-back-button"),L=r(W).querySelector(".button-text"),N=r(W).querySelector("ion-icon");W.text=l.text,W.mode=l.mode,W.icon=l.icon,W.color=l.color,W.disabled=l.disabled,W.style.setProperty("display","block"),W.style.setProperty("position","fixed"),P.addElement(N),B.addElement(L),R.addElement(W),R.beforeStyles({position:"absolute",top:"0px",[S]:"0px"}).beforeAddWrite((()=>{l.style.setProperty("display","none"),W.style.setProperty(g,p)})).afterAddWrite((()=>{l.style.setProperty("display",""),W.style.setProperty("display","none"),W.style.removeProperty(g)})).keyframes(C),B.beforeStyles({"transform-origin":`${g} top`}).keyframes(w),P.beforeStyles({"transform-origin":`${b} center`}).keyframes(k),t.addAnimation([B,P,R])},i=(t,n,r,a,l,s,i,d,f)=>{var m,y;const u=n?"right":"left",p=n?`calc(100% - ${l.right}px)`:`${l.left}px`,g=`${l.top}px`;let b=n?`-${window.innerWidth-i.right-8}px`:`${i.x+8}px`,S=.5;const h="scale(1)";let $=`scale(${S})`;if(d&&f){b=n?`-${window.innerWidth-f.right-8}px`:f.x-8+"px";const t=(null===(m=d.textContent)||void 0===m?void 0:m.trim())===(null===(y=a.textContent)||void 0===y?void 0:y.trim()),e=f.width/s.width;S=f.height/(s.height-c),$=t?`scale(${e}, ${S})`:`scale(${S})`}const q=i.top+i.height/2-l.height*S/2+"px",x=r?[{offset:0,opacity:0,transform:`translate3d(${b}, ${q}, 0) ${$}`},{offset:.1,opacity:0},{offset:1,opacity:1,transform:`translate3d(0px, ${g}, 0) ${h}`}]:[{offset:0,opacity:.99,transform:`translate3d(0px, ${g}, 0) ${h}`},{offset:.6,opacity:0},{offset:1,opacity:0,transform:`translate3d(${b}, ${q}, 0) ${$}`}],T=e("ion-title"),X=o();T.innerText=a.innerText,T.size=a.size,T.color=a.color,X.addElement(T),X.beforeStyles({"transform-origin":`${u} top`,height:`${l.height}px`,display:"",position:"relative",[u]:p}).beforeAddWrite((()=>{a.style.setProperty("opacity","0")})).afterAddWrite((()=>{a.style.setProperty("opacity",""),T.style.setProperty("display","none")})).keyframes(x),t.addAnimation(X)},c=(t("iosTransitionAnimation",((t,e)=>{var c;try{const d="cubic-bezier(0.32,0.72,0,1)",f="opacity",m="transform",y="0%",u=.8,p="rtl"===t.ownerDocument.dir,g=p?"-99.5%":"99.5%",b=p?"33%":"-33%",S=e.enteringEl,h=e.leavingEl,$="back"===e.direction,q=S.querySelector(":scope > ion-content"),x=S.querySelectorAll(":scope > ion-header > *:not(ion-toolbar), :scope > ion-footer > *"),T=S.querySelectorAll(":scope > ion-header > ion-toolbar"),X=o(),E=o();if(X.addElement(S).duration((null!==(c=e.duration)&&void 0!==c?c:0)||540).easing(e.easing||d).fill("both").beforeRemoveClass("ion-page-invisible"),h&&null!=t){const e=o();e.addElement(t),X.addAnimation(e)}if(q||0!==T.length||0!==x.length?(E.addElement(q),E.addElement(x)):E.addElement(S.querySelector(":scope > .ion-page, :scope > ion-nav, :scope > ion-tabs")),X.addAnimation(E),$?E.beforeClearStyles([f]).fromTo("transform",`translateX(${b})`,`translateX(${y})`).fromTo(f,u,1):E.beforeClearStyles([f]).fromTo("transform",`translateX(${g})`,`translateX(${y})`),q){const t=r(q).querySelector(".transition-effect");if(t){const e=t.querySelector(".transition-cover"),n=t.querySelector(".transition-shadow"),r=o(),a=o(),l=o();r.addElement(t).beforeStyles({opacity:"1",display:"block"}).afterStyles({opacity:"",display:""}),a.addElement(e).beforeClearStyles([f]).fromTo(f,0,.1),l.addElement(n).beforeClearStyles([f]).fromTo(f,.03,.7),r.addAnimation([a,l]),E.addAnimation([r])}}const A=S.querySelector("ion-header.header-collapse-condense"),{forward:v,backward:C}=((t,e,o,n,c)=>{const d=l(n,o),f=a(c),m=a(n),y=l(c,o),u=null!==d&&null!==f&&!o,p=null!==m&&null!==y&&o;if(u){const n=f.getBoundingClientRect(),a=d.getBoundingClientRect(),l=r(d).querySelector(".button-text"),c=null==l?void 0:l.getBoundingClientRect(),m=r(f).querySelector(".toolbar-title").getBoundingClientRect();i(t,e,o,f,n,m,a,l,c),s(t,e,o,d,a,l,c,f,m)}else if(p){const n=m.getBoundingClientRect(),a=y.getBoundingClientRect(),l=r(y).querySelector(".button-text"),c=null==l?void 0:l.getBoundingClientRect(),d=r(m).querySelector(".toolbar-title").getBoundingClientRect();i(t,e,o,m,n,d,a,l,c),s(t,e,o,y,a,l,c,m,d)}return{forward:u,backward:p}})(X,p,$,S,h);if(T.forEach((t=>{const e=o();e.addElement(t),X.addAnimation(e);const n=o();n.addElement(t.querySelector("ion-title"));const a=o(),l=Array.from(t.querySelectorAll("ion-buttons,[menuToggle]")),s=t.closest("ion-header"),i=null==s?void 0:s.classList.contains("header-collapse-condense-inactive");let c;c=$?l.filter((t=>{const e=t.classList.contains("buttons-collapse");return e&&!i||!e})):l.filter((t=>!t.classList.contains("buttons-collapse"))),a.addElement(c);const d=o();d.addElement(t.querySelectorAll(":scope > *:not(ion-title):not(ion-buttons):not([menuToggle])"));const m=o();m.addElement(r(t).querySelector(".toolbar-background"));const u=o(),S=t.querySelector("ion-back-button");if(S&&u.addElement(S),e.addAnimation([n,a,d,m,u]),a.fromTo(f,.01,1),d.fromTo(f,.01,1),$)i||n.fromTo("transform",`translateX(${b})`,`translateX(${y})`).fromTo(f,.01,1),d.fromTo("transform",`translateX(${b})`,`translateX(${y})`),u.fromTo(f,.01,1);else if(A||n.fromTo("transform",`translateX(${g})`,`translateX(${y})`).fromTo(f,.01,1),d.fromTo("transform",`translateX(${g})`,`translateX(${y})`),m.beforeClearStyles([f,"transform"]),(null==s?void 0:s.translucent)?m.fromTo("transform",p?"translateX(-100%)":"translateX(100%)","translateX(0px)"):m.fromTo(f,.01,"var(--opacity)"),v||u.fromTo(f,.01,1),S&&!v){const t=o();t.addElement(r(S).querySelector(".button-text")).fromTo("transform",p?"translateX(-100px)":"translateX(100px)","translateX(0px)"),e.addAnimation(t)}})),h){const t=o(),e=h.querySelector(":scope > ion-content"),a=h.querySelectorAll(":scope > ion-header > ion-toolbar"),l=h.querySelectorAll(":scope > ion-header > *:not(ion-toolbar), :scope > ion-footer > *");if(e||0!==a.length||0!==l.length?(t.addElement(e),t.addElement(l)):t.addElement(h.querySelector(":scope > .ion-page, :scope > ion-nav, :scope > ion-tabs")),X.addAnimation(t),$){t.beforeClearStyles([f]).fromTo("transform",`translateX(${y})`,p?"translateX(-100%)":"translateX(100%)");const e=n(h);X.afterAddWrite((()=>{"normal"===X.getDirection()&&e.style.setProperty("display","none")}))}else t.fromTo("transform",`translateX(${y})`,`translateX(${b})`).fromTo(f,1,u);if(e){const n=r(e).querySelector(".transition-effect");if(n){const e=n.querySelector(".transition-cover"),r=n.querySelector(".transition-shadow"),a=o(),l=o(),s=o();a.addElement(n).beforeStyles({opacity:"1",display:"block"}).afterStyles({opacity:"",display:""}),l.addElement(e).beforeClearStyles([f]).fromTo(f,.1,0),s.addElement(r).beforeClearStyles([f]).fromTo(f,.7,.03),a.addAnimation([l,s]),t.addAnimation([a])}}a.forEach((t=>{const e=o();e.addElement(t);const n=o();n.addElement(t.querySelector("ion-title"));const a=o(),l=t.querySelectorAll("ion-buttons,[menuToggle]"),s=t.closest("ion-header"),i=null==s?void 0:s.classList.contains("header-collapse-condense-inactive"),c=Array.from(l).filter((t=>{const e=t.classList.contains("buttons-collapse");return e&&!i||!e}));a.addElement(c);const d=o(),u=t.querySelectorAll(":scope > *:not(ion-title):not(ion-buttons):not([menuToggle])");u.length>0&&d.addElement(u);const g=o();g.addElement(r(t).querySelector(".toolbar-background"));const S=o(),h=t.querySelector("ion-back-button");if(h&&S.addElement(h),e.addAnimation([n,a,d,S,g]),X.addAnimation(e),S.fromTo(f,.99,0),a.fromTo(f,.99,0),d.fromTo(f,.99,0),$){if(i||n.fromTo("transform",`translateX(${y})`,p?"translateX(-100%)":"translateX(100%)").fromTo(f,.99,0),d.fromTo("transform",`translateX(${y})`,p?"translateX(-100%)":"translateX(100%)"),g.beforeClearStyles([f,"transform"]),(null==s?void 0:s.translucent)?g.fromTo("transform","translateX(0px)",p?"translateX(-100%)":"translateX(100%)"):g.fromTo(f,"var(--opacity)",0),h&&!C){const t=o();t.addElement(r(h).querySelector(".button-text")).fromTo("transform",`translateX(${y})`,`translateX(${(p?-124:124)+"px"})`),e.addAnimation(t)}}else i||n.fromTo("transform",`translateX(${y})`,`translateX(${b})`).fromTo(f,.99,0).afterClearStyles([m,f]),d.fromTo("transform",`translateX(${y})`,`translateX(${b})`).afterClearStyles([m,f]),S.afterClearStyles([f]),n.afterClearStyles([f]),a.afterClearStyles([f])}))}return X}catch(d){throw d}})),10)}}}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW9zLnRyYW5zaXRpb24tbGVnYWN5LUQyQ0pDVDhpLmpzIiwic291cmNlcyI6WyIuLi8uLi9ub2RlX21vZHVsZXMvQGlvbmljL2NvcmUvY29tcG9uZW50cy9pb3MudHJhbnNpdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIChDKSBJb25pYyBodHRwOi8vaW9uaWNmcmFtZXdvcmsuY29tIC0gTUlUIExpY2Vuc2VcbiAqL1xuaW1wb3J0IHsgYyBhcyBjcmVhdGVBbmltYXRpb24gfSBmcm9tICcuL2FuaW1hdGlvbi5qcyc7XG5pbXBvcnQgeyBnIGFzIGdldElvblBhZ2VFbGVtZW50IH0gZnJvbSAnLi9pbmRleDIuanMnO1xuXG5jb25zdCBEVVJBVElPTiA9IDU0MDtcbi8vIFRPRE8oRlctMjgzMik6IHR5cGVzXG5jb25zdCBnZXRDbG9uZWRFbGVtZW50ID0gKHRhZ05hbWUpID0+IHtcbiAgICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgJHt0YWdOYW1lfS5pb24tY2xvbmVkLWVsZW1lbnRgKTtcbn07XG5jb25zdCBzaGFkb3cgPSAoZWwpID0+IHtcbiAgICByZXR1cm4gZWwuc2hhZG93Um9vdCB8fCBlbDtcbn07XG5jb25zdCBnZXRMYXJnZVRpdGxlID0gKHJlZkVsKSA9PiB7XG4gICAgY29uc3QgdGFicyA9IHJlZkVsLnRhZ05hbWUgPT09ICdJT04tVEFCUycgPyByZWZFbCA6IHJlZkVsLnF1ZXJ5U2VsZWN0b3IoJ2lvbi10YWJzJyk7XG4gICAgY29uc3QgcXVlcnkgPSAnaW9uLWNvbnRlbnQgaW9uLWhlYWRlcjpub3QoLmhlYWRlci1jb2xsYXBzZS1jb25kZW5zZS1pbmFjdGl2ZSkgaW9uLXRpdGxlLnRpdGxlLWxhcmdlJztcbiAgICBpZiAodGFicyAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IGFjdGl2ZVRhYiA9IHRhYnMucXVlcnlTZWxlY3RvcignaW9uLXRhYjpub3QoLnRhYi1oaWRkZW4pLCAuaW9uLXBhZ2U6bm90KC5pb24tcGFnZS1oaWRkZW4pJyk7XG4gICAgICAgIHJldHVybiBhY3RpdmVUYWIgIT0gbnVsbCA/IGFjdGl2ZVRhYi5xdWVyeVNlbGVjdG9yKHF1ZXJ5KSA6IG51bGw7XG4gICAgfVxuICAgIHJldHVybiByZWZFbC5xdWVyeVNlbGVjdG9yKHF1ZXJ5KTtcbn07XG5jb25zdCBnZXRCYWNrQnV0dG9uID0gKHJlZkVsLCBiYWNrRGlyZWN0aW9uKSA9PiB7XG4gICAgY29uc3QgdGFicyA9IHJlZkVsLnRhZ05hbWUgPT09ICdJT04tVEFCUycgPyByZWZFbCA6IHJlZkVsLnF1ZXJ5U2VsZWN0b3IoJ2lvbi10YWJzJyk7XG4gICAgbGV0IGJ1dHRvbnNMaXN0ID0gW107XG4gICAgaWYgKHRhYnMgIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBhY3RpdmVUYWIgPSB0YWJzLnF1ZXJ5U2VsZWN0b3IoJ2lvbi10YWI6bm90KC50YWItaGlkZGVuKSwgLmlvbi1wYWdlOm5vdCguaW9uLXBhZ2UtaGlkZGVuKScpO1xuICAgICAgICBpZiAoYWN0aXZlVGFiICE9IG51bGwpIHtcbiAgICAgICAgICAgIGJ1dHRvbnNMaXN0ID0gYWN0aXZlVGFiLnF1ZXJ5U2VsZWN0b3JBbGwoJ2lvbi1idXR0b25zJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGJ1dHRvbnNMaXN0ID0gcmVmRWwucXVlcnlTZWxlY3RvckFsbCgnaW9uLWJ1dHRvbnMnKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBidXR0b25zIG9mIGJ1dHRvbnNMaXN0KSB7XG4gICAgICAgIGNvbnN0IHBhcmVudEhlYWRlciA9IGJ1dHRvbnMuY2xvc2VzdCgnaW9uLWhlYWRlcicpO1xuICAgICAgICBjb25zdCBhY3RpdmVIZWFkZXIgPSBwYXJlbnRIZWFkZXIgJiYgIXBhcmVudEhlYWRlci5jbGFzc0xpc3QuY29udGFpbnMoJ2hlYWRlci1jb2xsYXBzZS1jb25kZW5zZS1pbmFjdGl2ZScpO1xuICAgICAgICBjb25zdCBiYWNrQnV0dG9uID0gYnV0dG9ucy5xdWVyeVNlbGVjdG9yKCdpb24tYmFjay1idXR0b24nKTtcbiAgICAgICAgY29uc3QgYnV0dG9uc0NvbGxhcHNlID0gYnV0dG9ucy5jbGFzc0xpc3QuY29udGFpbnMoJ2J1dHRvbnMtY29sbGFwc2UnKTtcbiAgICAgICAgY29uc3Qgc3RhcnRTbG90ID0gYnV0dG9ucy5zbG90ID09PSAnc3RhcnQnIHx8IGJ1dHRvbnMuc2xvdCA9PT0gJyc7XG4gICAgICAgIGlmIChiYWNrQnV0dG9uICE9PSBudWxsICYmIHN0YXJ0U2xvdCAmJiAoKGJ1dHRvbnNDb2xsYXBzZSAmJiBhY3RpdmVIZWFkZXIgJiYgYmFja0RpcmVjdGlvbikgfHwgIWJ1dHRvbnNDb2xsYXBzZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBiYWNrQnV0dG9uO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufTtcbmNvbnN0IGNyZWF0ZUxhcmdlVGl0bGVUcmFuc2l0aW9uID0gKHJvb3RBbmltYXRpb24sIHJ0bCwgYmFja0RpcmVjdGlvbiwgZW50ZXJpbmdFbCwgbGVhdmluZ0VsKSA9PiB7XG4gICAgY29uc3QgZW50ZXJpbmdCYWNrQnV0dG9uID0gZ2V0QmFja0J1dHRvbihlbnRlcmluZ0VsLCBiYWNrRGlyZWN0aW9uKTtcbiAgICBjb25zdCBsZWF2aW5nTGFyZ2VUaXRsZSA9IGdldExhcmdlVGl0bGUobGVhdmluZ0VsKTtcbiAgICBjb25zdCBlbnRlcmluZ0xhcmdlVGl0bGUgPSBnZXRMYXJnZVRpdGxlKGVudGVyaW5nRWwpO1xuICAgIGNvbnN0IGxlYXZpbmdCYWNrQnV0dG9uID0gZ2V0QmFja0J1dHRvbihsZWF2aW5nRWwsIGJhY2tEaXJlY3Rpb24pO1xuICAgIGNvbnN0IHNob3VsZEFuaW1hdGlvbkZvcndhcmQgPSBlbnRlcmluZ0JhY2tCdXR0b24gIT09IG51bGwgJiYgbGVhdmluZ0xhcmdlVGl0bGUgIT09IG51bGwgJiYgIWJhY2tEaXJlY3Rpb247XG4gICAgY29uc3Qgc2hvdWxkQW5pbWF0aW9uQmFja3dhcmQgPSBlbnRlcmluZ0xhcmdlVGl0bGUgIT09IG51bGwgJiYgbGVhdmluZ0JhY2tCdXR0b24gIT09IG51bGwgJiYgYmFja0RpcmVjdGlvbjtcbiAgICBpZiAoc2hvdWxkQW5pbWF0aW9uRm9yd2FyZCkge1xuICAgICAgICBjb25zdCBsZWF2aW5nTGFyZ2VUaXRsZUJveCA9IGxlYXZpbmdMYXJnZVRpdGxlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBjb25zdCBlbnRlcmluZ0JhY2tCdXR0b25Cb3ggPSBlbnRlcmluZ0JhY2tCdXR0b24uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIGNvbnN0IGVudGVyaW5nQmFja0J1dHRvblRleHRFbCA9IHNoYWRvdyhlbnRlcmluZ0JhY2tCdXR0b24pLnF1ZXJ5U2VsZWN0b3IoJy5idXR0b24tdGV4dCcpO1xuICAgICAgICAvLyBUZXh0IGVsZW1lbnQgbm90IHJlbmRlcmVkIGlmIGRldmVsb3BlcnMgcGFzcyB0ZXh0PVwiXCIgdG8gdGhlIGJhY2sgYnV0dG9uXG4gICAgICAgIGNvbnN0IGVudGVyaW5nQmFja0J1dHRvblRleHRCb3ggPSBlbnRlcmluZ0JhY2tCdXR0b25UZXh0RWwgPT09IG51bGwgfHwgZW50ZXJpbmdCYWNrQnV0dG9uVGV4dEVsID09PSB2b2lkIDAgPyB2b2lkIDAgOiBlbnRlcmluZ0JhY2tCdXR0b25UZXh0RWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIGNvbnN0IGxlYXZpbmdMYXJnZVRpdGxlVGV4dEVsID0gc2hhZG93KGxlYXZpbmdMYXJnZVRpdGxlKS5xdWVyeVNlbGVjdG9yKCcudG9vbGJhci10aXRsZScpO1xuICAgICAgICBjb25zdCBsZWF2aW5nTGFyZ2VUaXRsZVRleHRCb3ggPSBsZWF2aW5nTGFyZ2VUaXRsZVRleHRFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgYW5pbWF0ZUxhcmdlVGl0bGUocm9vdEFuaW1hdGlvbiwgcnRsLCBiYWNrRGlyZWN0aW9uLCBsZWF2aW5nTGFyZ2VUaXRsZSwgbGVhdmluZ0xhcmdlVGl0bGVCb3gsIGxlYXZpbmdMYXJnZVRpdGxlVGV4dEJveCwgZW50ZXJpbmdCYWNrQnV0dG9uQm94LCBlbnRlcmluZ0JhY2tCdXR0b25UZXh0RWwsIGVudGVyaW5nQmFja0J1dHRvblRleHRCb3gpO1xuICAgICAgICBhbmltYXRlQmFja0J1dHRvbihyb290QW5pbWF0aW9uLCBydGwsIGJhY2tEaXJlY3Rpb24sIGVudGVyaW5nQmFja0J1dHRvbiwgZW50ZXJpbmdCYWNrQnV0dG9uQm94LCBlbnRlcmluZ0JhY2tCdXR0b25UZXh0RWwsIGVudGVyaW5nQmFja0J1dHRvblRleHRCb3gsIGxlYXZpbmdMYXJnZVRpdGxlLCBsZWF2aW5nTGFyZ2VUaXRsZVRleHRCb3gpO1xuICAgIH1cbiAgICBlbHNlIGlmIChzaG91bGRBbmltYXRpb25CYWNrd2FyZCkge1xuICAgICAgICBjb25zdCBlbnRlcmluZ0xhcmdlVGl0bGVCb3ggPSBlbnRlcmluZ0xhcmdlVGl0bGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIGNvbnN0IGxlYXZpbmdCYWNrQnV0dG9uQm94ID0gbGVhdmluZ0JhY2tCdXR0b24uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIGNvbnN0IGxlYXZpbmdCYWNrQnV0dG9uVGV4dEVsID0gc2hhZG93KGxlYXZpbmdCYWNrQnV0dG9uKS5xdWVyeVNlbGVjdG9yKCcuYnV0dG9uLXRleHQnKTtcbiAgICAgICAgLy8gVGV4dCBlbGVtZW50IG5vdCByZW5kZXJlZCBpZiBkZXZlbG9wZXJzIHBhc3MgdGV4dD1cIlwiIHRvIHRoZSBiYWNrIGJ1dHRvblxuICAgICAgICBjb25zdCBsZWF2aW5nQmFja0J1dHRvblRleHRCb3ggPSBsZWF2aW5nQmFja0J1dHRvblRleHRFbCA9PT0gbnVsbCB8fCBsZWF2aW5nQmFja0J1dHRvblRleHRFbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogbGVhdmluZ0JhY2tCdXR0b25UZXh0RWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIGNvbnN0IGVudGVyaW5nTGFyZ2VUaXRsZVRleHRFbCA9IHNoYWRvdyhlbnRlcmluZ0xhcmdlVGl0bGUpLnF1ZXJ5U2VsZWN0b3IoJy50b29sYmFyLXRpdGxlJyk7XG4gICAgICAgIGNvbnN0IGVudGVyaW5nTGFyZ2VUaXRsZVRleHRCb3ggPSBlbnRlcmluZ0xhcmdlVGl0bGVUZXh0RWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIGFuaW1hdGVMYXJnZVRpdGxlKHJvb3RBbmltYXRpb24sIHJ0bCwgYmFja0RpcmVjdGlvbiwgZW50ZXJpbmdMYXJnZVRpdGxlLCBlbnRlcmluZ0xhcmdlVGl0bGVCb3gsIGVudGVyaW5nTGFyZ2VUaXRsZVRleHRCb3gsIGxlYXZpbmdCYWNrQnV0dG9uQm94LCBsZWF2aW5nQmFja0J1dHRvblRleHRFbCwgbGVhdmluZ0JhY2tCdXR0b25UZXh0Qm94KTtcbiAgICAgICAgYW5pbWF0ZUJhY2tCdXR0b24ocm9vdEFuaW1hdGlvbiwgcnRsLCBiYWNrRGlyZWN0aW9uLCBsZWF2aW5nQmFja0J1dHRvbiwgbGVhdmluZ0JhY2tCdXR0b25Cb3gsIGxlYXZpbmdCYWNrQnV0dG9uVGV4dEVsLCBsZWF2aW5nQmFja0J1dHRvblRleHRCb3gsIGVudGVyaW5nTGFyZ2VUaXRsZSwgZW50ZXJpbmdMYXJnZVRpdGxlVGV4dEJveCk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGZvcndhcmQ6IHNob3VsZEFuaW1hdGlvbkZvcndhcmQsXG4gICAgICAgIGJhY2t3YXJkOiBzaG91bGRBbmltYXRpb25CYWNrd2FyZCxcbiAgICB9O1xufTtcbmNvbnN0IGFuaW1hdGVCYWNrQnV0dG9uID0gKHJvb3RBbmltYXRpb24sIHJ0bCwgYmFja0RpcmVjdGlvbiwgYmFja0J1dHRvbkVsLCBiYWNrQnV0dG9uQm94LCBiYWNrQnV0dG9uVGV4dEVsLCBiYWNrQnV0dG9uVGV4dEJveCwgbGFyZ2VUaXRsZUVsLCBsYXJnZVRpdGxlVGV4dEJveCkgPT4ge1xuICAgIHZhciBfYSwgX2I7XG4gICAgY29uc3QgQkFDS19CVVRUT05fU1RBUlRfT0ZGU0VUID0gcnRsID8gYGNhbGMoMTAwJSAtICR7YmFja0J1dHRvbkJveC5yaWdodCArIDR9cHgpYCA6IGAke2JhY2tCdXR0b25Cb3gubGVmdCAtIDR9cHhgO1xuICAgIGNvbnN0IFRFWFRfT1JJR0lOX1ggPSBydGwgPyAncmlnaHQnIDogJ2xlZnQnO1xuICAgIGNvbnN0IElDT05fT1JJR0lOX1ggPSBydGwgPyAnbGVmdCcgOiAncmlnaHQnO1xuICAgIGNvbnN0IENPTlRBSU5FUl9PUklHSU5fWCA9IHJ0bCA/ICdyaWdodCcgOiAnbGVmdCc7XG4gICAgbGV0IFdJRFRIX1NDQUxFID0gMTtcbiAgICBsZXQgSEVJR0hUX1NDQUxFID0gMTtcbiAgICBsZXQgVEVYVF9TVEFSVF9TQ0FMRSA9IGBzY2FsZSgke0hFSUdIVF9TQ0FMRX0pYDtcbiAgICBjb25zdCBURVhUX0VORF9TQ0FMRSA9ICdzY2FsZSgxKSc7XG4gICAgaWYgKGJhY2tCdXR0b25UZXh0RWwgJiYgYmFja0J1dHRvblRleHRCb3gpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdoZW4gdGhlIHRpdGxlIGFuZCBiYWNrIGJ1dHRvbiB0ZXh0cyBtYXRjaCB0aGVuIHRoZXkgc2hvdWxkIG92ZXJsYXAgZHVyaW5nIHRoZVxuICAgICAgICAgKiBwYWdlIHRyYW5zaXRpb24uIElmIHRoZSB0ZXh0cyBkbyBub3QgbWF0Y2ggdXAgdGhlbiB0aGUgYmFjayBidXR0b24gdGV4dCBzY2FsZVxuICAgICAgICAgKiBhZGp1c3RzIHRvIG5vdCBwZXJmZWN0bHkgbWF0Y2ggdGhlIGxhcmdlIHRpdGxlIHRleHQgb3RoZXJ3aXNlIHRoZSBwcm9wb3J0aW9uc1xuICAgICAgICAgKiB3aWxsIGJlIGluY29ycmVjdC4gV2hlbiB0aGUgdGV4dHMgbWF0Y2ggd2Ugc2NhbGUgYm90aCB0aGUgd2lkdGggYW5kIGhlaWdodCB0b1xuICAgICAgICAgKiBhY2NvdW50IGZvciBmb250IHdlaWdodCBkaWZmZXJlbmNlcyBiZXR3ZWVuIHRoZSB0aXRsZSBhbmQgYmFjayBidXR0b24uXG4gICAgICAgICAqL1xuICAgICAgICBjb25zdCBkb1RpdGxlQW5kQnV0dG9uVGV4dHNNYXRjaCA9ICgoX2EgPSBiYWNrQnV0dG9uVGV4dEVsLnRleHRDb250ZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudHJpbSgpKSA9PT0gKChfYiA9IGxhcmdlVGl0bGVFbC50ZXh0Q29udGVudCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnRyaW0oKSk7XG4gICAgICAgIFdJRFRIX1NDQUxFID0gbGFyZ2VUaXRsZVRleHRCb3gud2lkdGggLyBiYWNrQnV0dG9uVGV4dEJveC53aWR0aDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFN1YnRyYWN0IGFuIG9mZnNldCB0byBhY2NvdW50IGZvciBzbGlnaHQgc2l6aW5nL3BhZGRpbmcgZGlmZmVyZW5jZXMgYmV0d2VlbiB0aGVcbiAgICAgICAgICogdGl0bGUgYW5kIHRoZSBiYWNrIGJ1dHRvbi5cbiAgICAgICAgICovXG4gICAgICAgIEhFSUdIVF9TQ0FMRSA9IChsYXJnZVRpdGxlVGV4dEJveC5oZWlnaHQgLSBMQVJHRV9USVRMRV9TSVpFX09GRlNFVCkgLyBiYWNrQnV0dG9uVGV4dEJveC5oZWlnaHQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFdmVuIHRob3VnaCB3ZSBzZXQgVEVYVF9TVEFSVF9TQ0FMRSB0byBIRUlHSFRfU0NBTEUgYWJvdmUsIHdlIHBvdGVudGlhbGx5IG5lZWRcbiAgICAgICAgICogdG8gcmUtY29tcHV0ZSB0aGlzIGhlcmUgc2luY2UgdGhlIEhFSUdIVF9TQ0FMRSBtYXkgaGF2ZSBjaGFuZ2VkLlxuICAgICAgICAgKi9cbiAgICAgICAgVEVYVF9TVEFSVF9TQ0FMRSA9IGRvVGl0bGVBbmRCdXR0b25UZXh0c01hdGNoID8gYHNjYWxlKCR7V0lEVEhfU0NBTEV9LCAke0hFSUdIVF9TQ0FMRX0pYCA6IGBzY2FsZSgke0hFSUdIVF9TQ0FMRX0pYDtcbiAgICB9XG4gICAgY29uc3QgYmFja0J1dHRvbkljb25FbCA9IHNoYWRvdyhiYWNrQnV0dG9uRWwpLnF1ZXJ5U2VsZWN0b3IoJ2lvbi1pY29uJyk7XG4gICAgY29uc3QgYmFja0J1dHRvbkljb25Cb3ggPSBiYWNrQnV0dG9uSWNvbkVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIC8qKlxuICAgICAqIFdlIG5lZWQgdG8gb2Zmc2V0IHRoZSBjb250YWluZXIgYnkgdGhlIGljb24gZGltZW5zaW9uc1xuICAgICAqIHNvIHRoYXQgdGhlIGJhY2sgYnV0dG9uIHRleHQgYWxpZ25zIHdpdGggdGhlIGxhcmdlIHRpdGxlXG4gICAgICogdGV4dC4gT3RoZXJ3aXNlLCB0aGUgYmFjayBidXR0b24gaWNvbiB3aWxsIGFsaWduIHdpdGggdGhlXG4gICAgICogbGFyZ2UgdGl0bGUgdGV4dCBidXQgdGhlIGJhY2sgYnV0dG9uIHRleHQgd2lsbCBub3QuXG4gICAgICovXG4gICAgY29uc3QgQ09OVEFJTkVSX1NUQVJUX1RSQU5TTEFURV9YID0gcnRsXG4gICAgICAgID8gYCR7YmFja0J1dHRvbkljb25Cb3gud2lkdGggLyAyIC0gKGJhY2tCdXR0b25JY29uQm94LnJpZ2h0IC0gYmFja0J1dHRvbkJveC5yaWdodCl9cHhgXG4gICAgICAgIDogYCR7YmFja0J1dHRvbkJveC5sZWZ0IC0gYmFja0J1dHRvbkljb25Cb3gud2lkdGggLyAyfXB4YDtcbiAgICBjb25zdCBDT05UQUlORVJfRU5EX1RSQU5TTEFURV9YID0gcnRsID8gYC0ke3dpbmRvdy5pbm5lcldpZHRoIC0gYmFja0J1dHRvbkJveC5yaWdodH1weGAgOiBgJHtiYWNrQnV0dG9uQm94LmxlZnR9cHhgO1xuICAgIC8qKlxuICAgICAqIEJhY2sgYnV0dG9uIGNvbnRhaW5lciBzaG91bGQgYmVcbiAgICAgKiBhbGlnbmVkIHRvIHRoZSB0b3Agb2YgdGhlIHRpdGxlIGNvbnRhaW5lclxuICAgICAqIHNvIHRoZSB0ZXh0cyBvdmVybGFwIGFzIHRoZSBiYWNrIGJ1dHRvblxuICAgICAqIHRleHQgYmVnaW5zIHRvIGZhZGUgaW4uXG4gICAgICovXG4gICAgY29uc3QgQ09OVEFJTkVSX1NUQVJUX1RSQU5TTEFURV9ZID0gYCR7bGFyZ2VUaXRsZVRleHRCb3gudG9wfXB4YDtcbiAgICAvKipcbiAgICAgKiBUaGUgY2xvbmVkIGJhY2sgYnV0dG9uIHNob3VsZCBhbGlnbiBleGFjdGx5IHdpdGggdGhlXG4gICAgICogcmVhbCBiYWNrIGJ1dHRvbiBvbiB0aGUgZW50ZXJpbmcgcGFnZSBvdGhlcndpc2UgdGhlcmUgd2lsbFxuICAgICAqIGJlIGEgbGF5b3V0IHNoaWZ0LlxuICAgICAqL1xuICAgIGNvbnN0IENPTlRBSU5FUl9FTkRfVFJBTlNMQVRFX1kgPSBgJHtiYWNrQnV0dG9uQm94LnRvcH1weGA7XG4gICAgLyoqXG4gICAgICogSW4gdGhlIGZvcndhcmQgZGlyZWN0aW9uLCB0aGUgY2xvbmVkIGJhY2sgYnV0dG9uXG4gICAgICogY29udGFpbmVyIHNob3VsZCB0cmFuc2xhdGUgZnJvbSBvdmVyIHRoZSBsYXJnZSB0aXRsZVxuICAgICAqIHRvIG92ZXIgdGhlIGJhY2sgYnV0dG9uLiBJbiB0aGUgYmFja3dhcmQgZGlyZWN0aW9uLFxuICAgICAqIGl0IHNob3VsZCB0cmFuc2xhdGUgZnJvbSBvdmVyIHRoZSBiYWNrIGJ1dHRvbiB0byBvdmVyXG4gICAgICogdGhlIGxhcmdlIHRpdGxlLlxuICAgICAqL1xuICAgIGNvbnN0IEZPUldBUkRfQ09OVEFJTkVSX0tFWUZSQU1FUyA9IFtcbiAgICAgICAgeyBvZmZzZXQ6IDAsIHRyYW5zZm9ybTogYHRyYW5zbGF0ZTNkKCR7Q09OVEFJTkVSX1NUQVJUX1RSQU5TTEFURV9YfSwgJHtDT05UQUlORVJfU1RBUlRfVFJBTlNMQVRFX1l9LCAwKWAgfSxcbiAgICAgICAgeyBvZmZzZXQ6IDEsIHRyYW5zZm9ybTogYHRyYW5zbGF0ZTNkKCR7Q09OVEFJTkVSX0VORF9UUkFOU0xBVEVfWH0sICR7Q09OVEFJTkVSX0VORF9UUkFOU0xBVEVfWX0sIDApYCB9LFxuICAgIF07XG4gICAgY29uc3QgQkFDS1dBUkRfQ09OVEFJTkVSX0tFWUZSQU1FUyA9IFtcbiAgICAgICAgeyBvZmZzZXQ6IDAsIHRyYW5zZm9ybTogYHRyYW5zbGF0ZTNkKCR7Q09OVEFJTkVSX0VORF9UUkFOU0xBVEVfWH0sICR7Q09OVEFJTkVSX0VORF9UUkFOU0xBVEVfWX0sIDApYCB9LFxuICAgICAgICB7IG9mZnNldDogMSwgdHJhbnNmb3JtOiBgdHJhbnNsYXRlM2QoJHtDT05UQUlORVJfU1RBUlRfVFJBTlNMQVRFX1h9LCAke0NPTlRBSU5FUl9TVEFSVF9UUkFOU0xBVEVfWX0sIDApYCB9LFxuICAgIF07XG4gICAgY29uc3QgQ09OVEFJTkVSX0tFWUZSQU1FUyA9IGJhY2tEaXJlY3Rpb24gPyBCQUNLV0FSRF9DT05UQUlORVJfS0VZRlJBTUVTIDogRk9SV0FSRF9DT05UQUlORVJfS0VZRlJBTUVTO1xuICAgIC8qKlxuICAgICAqIEluIHRoZSBmb3J3YXJkIGRpcmVjdGlvbiwgdGhlIHRleHQgaW4gdGhlIGNsb25lZCBiYWNrIGJ1dHRvblxuICAgICAqIHNob3VsZCBzdGFydCB0byBiZSAocm91Z2hseSkgdGhlIHNpemUgb2YgdGhlIGxhcmdlIHRpdGxlXG4gICAgICogYW5kIHRoZW4gc2NhbGUgZG93biB0byBiZSB0aGUgc2l6ZSBvZiB0aGUgYWN0dWFsIGJhY2sgYnV0dG9uLlxuICAgICAqIFRoZSB0ZXh0IHNob3VsZCBhbHNvIHRyYW5zbGF0ZSwgYnV0IHRoYXQgdHJhbnNsYXRlIGlzIGhhbmRsZWRcbiAgICAgKiBieSB0aGUgY29udGFpbmVyIGtleWZyYW1lcy5cbiAgICAgKi9cbiAgICBjb25zdCBGT1JXQVJEX1RFWFRfS0VZRlJBTUVTID0gW1xuICAgICAgICB7IG9mZnNldDogMCwgb3BhY2l0eTogMCwgdHJhbnNmb3JtOiBURVhUX1NUQVJUX1NDQUxFIH0sXG4gICAgICAgIHsgb2Zmc2V0OiAxLCBvcGFjaXR5OiAxLCB0cmFuc2Zvcm06IFRFWFRfRU5EX1NDQUxFIH0sXG4gICAgXTtcbiAgICBjb25zdCBCQUNLV0FSRF9URVhUX0tFWUZSQU1FUyA9IFtcbiAgICAgICAgeyBvZmZzZXQ6IDAsIG9wYWNpdHk6IDEsIHRyYW5zZm9ybTogVEVYVF9FTkRfU0NBTEUgfSxcbiAgICAgICAgeyBvZmZzZXQ6IDEsIG9wYWNpdHk6IDAsIHRyYW5zZm9ybTogVEVYVF9TVEFSVF9TQ0FMRSB9LFxuICAgIF07XG4gICAgY29uc3QgVEVYVF9LRVlGUkFNRVMgPSBiYWNrRGlyZWN0aW9uID8gQkFDS1dBUkRfVEVYVF9LRVlGUkFNRVMgOiBGT1JXQVJEX1RFWFRfS0VZRlJBTUVTO1xuICAgIC8qKlxuICAgICAqIFRoZSBpY29uIHNob3VsZCBzY2FsZSBpbi9vdXQgaW4gdGhlIHNlY29uZFxuICAgICAqIGhhbGYgb2YgdGhlIGFuaW1hdGlvbi4gVGhlIGljb24gc2hvdWxkIGFsc29cbiAgICAgKiB0cmFuc2xhdGUsIGJ1dCB0aGF0IHRyYW5zbGF0ZSBpcyBoYW5kbGVkIGJ5IHRoZVxuICAgICAqIGNvbnRhaW5lciBrZXlmcmFtZXMuXG4gICAgICovXG4gICAgY29uc3QgRk9SV0FSRF9JQ09OX0tFWUZSQU1FUyA9IFtcbiAgICAgICAgeyBvZmZzZXQ6IDAsIG9wYWNpdHk6IDAsIHRyYW5zZm9ybTogJ3NjYWxlKDAuNiknIH0sXG4gICAgICAgIHsgb2Zmc2V0OiAwLjYsIG9wYWNpdHk6IDAsIHRyYW5zZm9ybTogJ3NjYWxlKDAuNiknIH0sXG4gICAgICAgIHsgb2Zmc2V0OiAxLCBvcGFjaXR5OiAxLCB0cmFuc2Zvcm06ICdzY2FsZSgxKScgfSxcbiAgICBdO1xuICAgIGNvbnN0IEJBQ0tXQVJEX0lDT05fS0VZRlJBTUVTID0gW1xuICAgICAgICB7IG9mZnNldDogMCwgb3BhY2l0eTogMSwgdHJhbnNmb3JtOiAnc2NhbGUoMSknIH0sXG4gICAgICAgIHsgb2Zmc2V0OiAwLjIsIG9wYWNpdHk6IDAsIHRyYW5zZm9ybTogJ3NjYWxlKDAuNiknIH0sXG4gICAgICAgIHsgb2Zmc2V0OiAxLCBvcGFjaXR5OiAwLCB0cmFuc2Zvcm06ICdzY2FsZSgwLjYpJyB9LFxuICAgIF07XG4gICAgY29uc3QgSUNPTl9LRVlGUkFNRVMgPSBiYWNrRGlyZWN0aW9uID8gQkFDS1dBUkRfSUNPTl9LRVlGUkFNRVMgOiBGT1JXQVJEX0lDT05fS0VZRlJBTUVTO1xuICAgIGNvbnN0IGVudGVyaW5nQmFja0J1dHRvblRleHRBbmltYXRpb24gPSBjcmVhdGVBbmltYXRpb24oKTtcbiAgICBjb25zdCBlbnRlcmluZ0JhY2tCdXR0b25JY29uQW5pbWF0aW9uID0gY3JlYXRlQW5pbWF0aW9uKCk7XG4gICAgY29uc3QgZW50ZXJpbmdCYWNrQnV0dG9uQW5pbWF0aW9uID0gY3JlYXRlQW5pbWF0aW9uKCk7XG4gICAgY29uc3QgY2xvbmVkQmFja0J1dHRvbkVsID0gZ2V0Q2xvbmVkRWxlbWVudCgnaW9uLWJhY2stYnV0dG9uJyk7XG4gICAgY29uc3QgY2xvbmVkQmFja0J1dHRvblRleHRFbCA9IHNoYWRvdyhjbG9uZWRCYWNrQnV0dG9uRWwpLnF1ZXJ5U2VsZWN0b3IoJy5idXR0b24tdGV4dCcpO1xuICAgIGNvbnN0IGNsb25lZEJhY2tCdXR0b25JY29uRWwgPSBzaGFkb3coY2xvbmVkQmFja0J1dHRvbkVsKS5xdWVyeVNlbGVjdG9yKCdpb24taWNvbicpO1xuICAgIGNsb25lZEJhY2tCdXR0b25FbC50ZXh0ID0gYmFja0J1dHRvbkVsLnRleHQ7XG4gICAgY2xvbmVkQmFja0J1dHRvbkVsLm1vZGUgPSBiYWNrQnV0dG9uRWwubW9kZTtcbiAgICBjbG9uZWRCYWNrQnV0dG9uRWwuaWNvbiA9IGJhY2tCdXR0b25FbC5pY29uO1xuICAgIGNsb25lZEJhY2tCdXR0b25FbC5jb2xvciA9IGJhY2tCdXR0b25FbC5jb2xvcjtcbiAgICBjbG9uZWRCYWNrQnV0dG9uRWwuZGlzYWJsZWQgPSBiYWNrQnV0dG9uRWwuZGlzYWJsZWQ7XG4gICAgY2xvbmVkQmFja0J1dHRvbkVsLnN0eWxlLnNldFByb3BlcnR5KCdkaXNwbGF5JywgJ2Jsb2NrJyk7XG4gICAgY2xvbmVkQmFja0J1dHRvbkVsLnN0eWxlLnNldFByb3BlcnR5KCdwb3NpdGlvbicsICdmaXhlZCcpO1xuICAgIGVudGVyaW5nQmFja0J1dHRvbkljb25BbmltYXRpb24uYWRkRWxlbWVudChjbG9uZWRCYWNrQnV0dG9uSWNvbkVsKTtcbiAgICBlbnRlcmluZ0JhY2tCdXR0b25UZXh0QW5pbWF0aW9uLmFkZEVsZW1lbnQoY2xvbmVkQmFja0J1dHRvblRleHRFbCk7XG4gICAgZW50ZXJpbmdCYWNrQnV0dG9uQW5pbWF0aW9uLmFkZEVsZW1lbnQoY2xvbmVkQmFja0J1dHRvbkVsKTtcbiAgICBlbnRlcmluZ0JhY2tCdXR0b25BbmltYXRpb25cbiAgICAgICAgLmJlZm9yZVN0eWxlcyh7XG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICB0b3A6ICcwcHgnLFxuICAgICAgICBbQ09OVEFJTkVSX09SSUdJTl9YXTogJzBweCcsXG4gICAgfSlcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSB3cml0ZSBob29rcyBtdXN0IGJlIHNldCBvbiB0aGlzIGFuaW1hdGlvbiBhcyBpdCBpcyBndWFyYW50ZWVkIHRvIHJ1bi4gT3RoZXJcbiAgICAgICAgICogYW5pbWF0aW9ucyBzdWNoIGFzIHRoZSBiYWNrIGJ1dHRvbiB0ZXh0IGFuaW1hdGlvbiB3aWxsIG5vdCBydW4gaWYgdGhlIGJhY2sgYnV0dG9uXG4gICAgICAgICAqIGhhcyBubyB2aXNpYmxlIHRleHQuXG4gICAgICAgICAqL1xuICAgICAgICAuYmVmb3JlQWRkV3JpdGUoKCkgPT4ge1xuICAgICAgICBiYWNrQnV0dG9uRWwuc3R5bGUuc2V0UHJvcGVydHkoJ2Rpc3BsYXknLCAnbm9uZScpO1xuICAgICAgICBjbG9uZWRCYWNrQnV0dG9uRWwuc3R5bGUuc2V0UHJvcGVydHkoVEVYVF9PUklHSU5fWCwgQkFDS19CVVRUT05fU1RBUlRfT0ZGU0VUKTtcbiAgICB9KVxuICAgICAgICAuYWZ0ZXJBZGRXcml0ZSgoKSA9PiB7XG4gICAgICAgIGJhY2tCdXR0b25FbC5zdHlsZS5zZXRQcm9wZXJ0eSgnZGlzcGxheScsICcnKTtcbiAgICAgICAgY2xvbmVkQmFja0J1dHRvbkVsLnN0eWxlLnNldFByb3BlcnR5KCdkaXNwbGF5JywgJ25vbmUnKTtcbiAgICAgICAgY2xvbmVkQmFja0J1dHRvbkVsLnN0eWxlLnJlbW92ZVByb3BlcnR5KFRFWFRfT1JJR0lOX1gpO1xuICAgIH0pXG4gICAgICAgIC5rZXlmcmFtZXMoQ09OVEFJTkVSX0tFWUZSQU1FUyk7XG4gICAgZW50ZXJpbmdCYWNrQnV0dG9uVGV4dEFuaW1hdGlvblxuICAgICAgICAuYmVmb3JlU3R5bGVzKHtcbiAgICAgICAgJ3RyYW5zZm9ybS1vcmlnaW4nOiBgJHtURVhUX09SSUdJTl9YfSB0b3BgLFxuICAgIH0pXG4gICAgICAgIC5rZXlmcmFtZXMoVEVYVF9LRVlGUkFNRVMpO1xuICAgIGVudGVyaW5nQmFja0J1dHRvbkljb25BbmltYXRpb25cbiAgICAgICAgLmJlZm9yZVN0eWxlcyh7XG4gICAgICAgICd0cmFuc2Zvcm0tb3JpZ2luJzogYCR7SUNPTl9PUklHSU5fWH0gY2VudGVyYCxcbiAgICB9KVxuICAgICAgICAua2V5ZnJhbWVzKElDT05fS0VZRlJBTUVTKTtcbiAgICByb290QW5pbWF0aW9uLmFkZEFuaW1hdGlvbihbXG4gICAgICAgIGVudGVyaW5nQmFja0J1dHRvblRleHRBbmltYXRpb24sXG4gICAgICAgIGVudGVyaW5nQmFja0J1dHRvbkljb25BbmltYXRpb24sXG4gICAgICAgIGVudGVyaW5nQmFja0J1dHRvbkFuaW1hdGlvbixcbiAgICBdKTtcbn07XG5jb25zdCBhbmltYXRlTGFyZ2VUaXRsZSA9IChyb290QW5pbWF0aW9uLCBydGwsIGJhY2tEaXJlY3Rpb24sIGxhcmdlVGl0bGVFbCwgbGFyZ2VUaXRsZUJveCwgbGFyZ2VUaXRsZVRleHRCb3gsIGJhY2tCdXR0b25Cb3gsIGJhY2tCdXR0b25UZXh0RWwsIGJhY2tCdXR0b25UZXh0Qm94KSA9PiB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICAvKipcbiAgICAgKiBUaGUgaG9yaXpvbnRhbCB0cmFuc2Zvcm0gb3JpZ2luIGZvciB0aGUgbGFyZ2UgdGl0bGVcbiAgICAgKi9cbiAgICBjb25zdCBPUklHSU5fWCA9IHJ0bCA/ICdyaWdodCcgOiAnbGVmdCc7XG4gICAgY29uc3QgVElUTEVfU1RBUlRfT0ZGU0VUID0gcnRsID8gYGNhbGMoMTAwJSAtICR7bGFyZ2VUaXRsZUJveC5yaWdodH1weClgIDogYCR7bGFyZ2VUaXRsZUJveC5sZWZ0fXB4YDtcbiAgICAvKipcbiAgICAgKiBUaGUgY2xvbmVkIGxhcmdlIHNob3VsZCBhbGlnbiBleGFjdGx5IHdpdGggdGhlXG4gICAgICogcmVhbCBsYXJnZSB0aXRsZSBvbiB0aGUgbGVhdmluZyBwYWdlIG90aGVyd2lzZSB0aGVyZSB3aWxsXG4gICAgICogYmUgYSBsYXlvdXQgc2hpZnQuXG4gICAgICovXG4gICAgY29uc3QgU1RBUlRfVFJBTlNMQVRFX1ggPSAnMHB4JztcbiAgICBjb25zdCBTVEFSVF9UUkFOU0xBVEVfWSA9IGAke2xhcmdlVGl0bGVCb3gudG9wfXB4YDtcbiAgICAvKipcbiAgICAgKiBIb3cgbXVjaCB0byBvZmZzZXQgdGhlIGxhcmdlIHRpdGxlIHRyYW5zbGF0aW9uIGJ5LlxuICAgICAqIFRoaXMgYWNjb3VudHMgZm9yIGRpZmZlcmVuY2VzIGluIHNpemluZyBiZXR3ZWVuIHRoZSBsYXJnZVxuICAgICAqIHRpdGxlIGFuZCB0aGUgYmFjayBidXR0b24gZHVlIHRvIHBhZGRpbmcgYW5kIGZvbnQgd2VpZ2h0LlxuICAgICAqL1xuICAgIGNvbnN0IExBUkdFX1RJVExFX1RSQU5TTEFUSU9OX09GRlNFVCA9IDg7XG4gICAgbGV0IEVORF9UUkFOU0xBVEVfWCA9IHJ0bFxuICAgICAgICA/IGAtJHt3aW5kb3cuaW5uZXJXaWR0aCAtIGJhY2tCdXR0b25Cb3gucmlnaHQgLSBMQVJHRV9USVRMRV9UUkFOU0xBVElPTl9PRkZTRVR9cHhgXG4gICAgICAgIDogYCR7YmFja0J1dHRvbkJveC54ICsgTEFSR0VfVElUTEVfVFJBTlNMQVRJT05fT0ZGU0VUfXB4YDtcbiAgICAvKipcbiAgICAgKiBIb3cgbXVjaCB0byBzY2FsZSB0aGUgbGFyZ2UgdGl0bGUgdXAvZG93biBieS5cbiAgICAgKi9cbiAgICBsZXQgSEVJR0hUX1NDQUxFID0gMC41O1xuICAgIC8qKlxuICAgICAqIFRoZSBsYXJnZSB0aXRsZSBhbHdheXMgc3RhcnRzIGZ1bGwgc2l6ZS5cbiAgICAgKi9cbiAgICBjb25zdCBTVEFSVF9TQ0FMRSA9ICdzY2FsZSgxKSc7XG4gICAgLyoqXG4gICAgICogQnkgZGVmYXVsdCwgd2UgZG9uJ3Qgd29ycnkgYWJvdXQgaGF2aW5nIHRoZSBsYXJnZSB0aXRsZSBzY2FsZWQgdG8gcGVyZmVjdGx5XG4gICAgICogbWF0Y2ggdGhlIGJhY2sgYnV0dG9uIGJlY2F1c2Ugd2UgZG9uJ3Qga25vdyBpZiB0aGUgYmFjayBidXR0b24ncyB0ZXh0IG1hdGNoZXNcbiAgICAgKiB0aGUgbGFyZ2UgdGl0bGUncyB0ZXh0LlxuICAgICAqL1xuICAgIGxldCBFTkRfU0NBTEUgPSBgc2NhbGUoJHtIRUlHSFRfU0NBTEV9KWA7XG4gICAgLy8gVGV4dCBlbGVtZW50IG5vdCByZW5kZXJlZCBpZiBkZXZlbG9wZXJzIHBhc3MgdGV4dD1cIlwiIHRvIHRoZSBiYWNrIGJ1dHRvblxuICAgIGlmIChiYWNrQnV0dG9uVGV4dEVsICYmIGJhY2tCdXR0b25UZXh0Qm94KSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgc2NhbGVkIHRpdGxlIHNob3VsZCAocm91Z2hseSkgb3ZlcmxhcCB0aGUgYmFjayBidXR0b24uIFRoaXMgZW5zdXJlcyB0aGF0XG4gICAgICAgICAqIHRoZSBiYWNrIGJ1dHRvbiBhbmQgdGl0bGUgb3ZlcmxhcCBkdXJpbmcgdGhlIGFuaW1hdGlvbi4gTm90ZSB0aGF0IHNpbmNlIGJvdGhcbiAgICAgICAgICogZWxlbWVudHMgZWl0aGVyIGZhZGUgaW4gb3IgZmFkZSBvdXQgb3ZlciB0aGUgY291cnNlIG9mIHRoZSBhbmltYXRpb24sIG5laXRoZXJcbiAgICAgICAgICogZWxlbWVudCB3aWxsIGJlIGZ1bGx5IHZpc2libGUgb24gdG9wIG9mIHRoZSBvdGhlci4gQXMgYSByZXN1bHQsIHRoZSBvdmVybGFwXG4gICAgICAgICAqIGRvZXMgbm90IG5lZWQgdG8gYmUgcGVyZmVjdCwgc28gYXBwcm94aW1hdGUgdmFsdWVzIGFyZSBhY2NlcHRhYmxlIGhlcmUuXG4gICAgICAgICAqL1xuICAgICAgICBFTkRfVFJBTlNMQVRFX1ggPSBydGxcbiAgICAgICAgICAgID8gYC0ke3dpbmRvdy5pbm5lcldpZHRoIC0gYmFja0J1dHRvblRleHRCb3gucmlnaHQgLSBMQVJHRV9USVRMRV9UUkFOU0xBVElPTl9PRkZTRVR9cHhgXG4gICAgICAgICAgICA6IGAke2JhY2tCdXR0b25UZXh0Qm94LnggLSBMQVJHRV9USVRMRV9UUkFOU0xBVElPTl9PRkZTRVR9cHhgO1xuICAgICAgICAvKipcbiAgICAgICAgICogSW4gdGhlIGZvcndhcmQgZGlyZWN0aW9uLCB0aGUgbGFyZ2UgdGl0bGUgc2hvdWxkIHN0YXJ0IGF0IGl0cyBub3JtYWwgc2l6ZSBhbmRcbiAgICAgICAgICogdGhlbiBzY2FsZSBkb3duIHRvIGJlIChyb3VnaGx5KSB0aGUgc2l6ZSBvZiB0aGUgYmFjayBidXR0b24gb24gdGhlIG90aGVyIHZpZXcuXG4gICAgICAgICAqIEluIHRoZSBiYWNrd2FyZCBkaXJlY3Rpb24sIHRoZSBsYXJnZSB0aXRsZSBzaG91bGQgc3RhcnQgYXQgKHJvdWdobHkpIHRoZSBzaXplXG4gICAgICAgICAqIG9mIHRoZSBiYWNrIGJ1dHRvbiBhbmQgdGhlbiBzY2FsZSB1cCB0byBpdHMgb3JpZ2luYWwgc2l6ZS5cbiAgICAgICAgICogTm90ZSB0aGF0IHNpbmNlIGJvdGggZWxlbWVudHMgZWl0aGVyIGZhZGUgaW4gb3IgZmFkZSBvdXQgb3ZlciB0aGUgY291cnNlIG9mIHRoZVxuICAgICAgICAgKiBhbmltYXRpb24sIG5laXRoZXIgZWxlbWVudCB3aWxsIGJlIGZ1bGx5IHZpc2libGUgb24gdG9wIG9mIHRoZSBvdGhlci4gQXMgYSByZXN1bHQsXG4gICAgICAgICAqIHRoZSBvdmVybGFwICBkb2VzIG5vdCBuZWVkIHRvIGJlIHBlcmZlY3QsIHNvIGFwcHJveGltYXRlIHZhbHVlcyBhcmUgYWNjZXB0YWJsZSBoZXJlLlxuICAgICAgICAgKi9cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdoZW4gdGhlIHRpdGxlIGFuZCBiYWNrIGJ1dHRvbiB0ZXh0cyBtYXRjaCB0aGVuIHRoZXkgc2hvdWxkIG92ZXJsYXAgZHVyaW5nIHRoZVxuICAgICAgICAgKiBwYWdlIHRyYW5zaXRpb24uIElmIHRoZSB0ZXh0cyBkbyBub3QgbWF0Y2ggdXAgdGhlbiB0aGUgbGFyZ2UgdGl0bGUgdGV4dCBzY2FsZVxuICAgICAgICAgKiBhZGp1c3RzIHRvIG5vdCBwZXJmZWN0bHkgbWF0Y2ggdGhlIGJhY2sgYnV0dG9uIHRleHQgb3RoZXJ3aXNlIHRoZSBwcm9wb3J0aW9uc1xuICAgICAgICAgKiB3aWxsIGJlIGluY29ycmVjdC4gV2hlbiB0aGUgdGV4dHMgbWF0Y2ggd2Ugc2NhbGUgYm90aCB0aGUgd2lkdGggYW5kIGhlaWdodCB0b1xuICAgICAgICAgKiBhY2NvdW50IGZvciBmb250IHdlaWdodCBkaWZmZXJlbmNlcyBiZXR3ZWVuIHRoZSB0aXRsZSBhbmQgYmFjayBidXR0b24uXG4gICAgICAgICAqL1xuICAgICAgICBjb25zdCBkb1RpdGxlQW5kQnV0dG9uVGV4dHNNYXRjaCA9ICgoX2EgPSBiYWNrQnV0dG9uVGV4dEVsLnRleHRDb250ZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudHJpbSgpKSA9PT0gKChfYiA9IGxhcmdlVGl0bGVFbC50ZXh0Q29udGVudCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnRyaW0oKSk7XG4gICAgICAgIGNvbnN0IFdJRFRIX1NDQUxFID0gYmFja0J1dHRvblRleHRCb3gud2lkdGggLyBsYXJnZVRpdGxlVGV4dEJveC53aWR0aDtcbiAgICAgICAgSEVJR0hUX1NDQUxFID0gYmFja0J1dHRvblRleHRCb3guaGVpZ2h0IC8gKGxhcmdlVGl0bGVUZXh0Qm94LmhlaWdodCAtIExBUkdFX1RJVExFX1NJWkVfT0ZGU0VUKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEV2ZW4gdGhvdWdoIHdlIHNldCBURVhUX1NUQVJUX1NDQUxFIHRvIEhFSUdIVF9TQ0FMRSBhYm92ZSwgd2UgcG90ZW50aWFsbHkgbmVlZFxuICAgICAgICAgKiB0byByZS1jb21wdXRlIHRoaXMgaGVyZSBzaW5jZSB0aGUgSEVJR0hUX1NDQUxFIG1heSBoYXZlIGNoYW5nZWQuXG4gICAgICAgICAqL1xuICAgICAgICBFTkRfU0NBTEUgPSBkb1RpdGxlQW5kQnV0dG9uVGV4dHNNYXRjaCA/IGBzY2FsZSgke1dJRFRIX1NDQUxFfSwgJHtIRUlHSFRfU0NBTEV9KWAgOiBgc2NhbGUoJHtIRUlHSFRfU0NBTEV9KWA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBtaWRwb2ludHMgb2YgdGhlIGJhY2sgYnV0dG9uIGFuZCB0aGUgdGl0bGUgc2hvdWxkIGFsaWduIHN1Y2ggdGhhdCB0aGUgYmFja1xuICAgICAqIGJ1dHRvbiBhbmQgdGl0bGUgYXBwZWFyIHRvIGJlIGNlbnRlcmVkIHdpdGggZWFjaCBvdGhlci5cbiAgICAgKi9cbiAgICBjb25zdCBiYWNrQnV0dG9uTWlkUG9pbnQgPSBiYWNrQnV0dG9uQm94LnRvcCArIGJhY2tCdXR0b25Cb3guaGVpZ2h0IC8gMjtcbiAgICBjb25zdCB0aXRsZU1pZFBvaW50ID0gKGxhcmdlVGl0bGVCb3guaGVpZ2h0ICogSEVJR0hUX1NDQUxFKSAvIDI7XG4gICAgY29uc3QgRU5EX1RSQU5TTEFURV9ZID0gYCR7YmFja0J1dHRvbk1pZFBvaW50IC0gdGl0bGVNaWRQb2ludH1weGA7XG4gICAgY29uc3QgQkFDS1dBUkRTX0tFWUZSQU1FUyA9IFtcbiAgICAgICAgeyBvZmZzZXQ6IDAsIG9wYWNpdHk6IDAsIHRyYW5zZm9ybTogYHRyYW5zbGF0ZTNkKCR7RU5EX1RSQU5TTEFURV9YfSwgJHtFTkRfVFJBTlNMQVRFX1l9LCAwKSAke0VORF9TQ0FMRX1gIH0sXG4gICAgICAgIHsgb2Zmc2V0OiAwLjEsIG9wYWNpdHk6IDAgfSxcbiAgICAgICAgeyBvZmZzZXQ6IDEsIG9wYWNpdHk6IDEsIHRyYW5zZm9ybTogYHRyYW5zbGF0ZTNkKCR7U1RBUlRfVFJBTlNMQVRFX1h9LCAke1NUQVJUX1RSQU5TTEFURV9ZfSwgMCkgJHtTVEFSVF9TQ0FMRX1gIH0sXG4gICAgXTtcbiAgICBjb25zdCBGT1JXQVJEU19LRVlGUkFNRVMgPSBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIG9mZnNldDogMCxcbiAgICAgICAgICAgIG9wYWNpdHk6IDAuOTksXG4gICAgICAgICAgICB0cmFuc2Zvcm06IGB0cmFuc2xhdGUzZCgke1NUQVJUX1RSQU5TTEFURV9YfSwgJHtTVEFSVF9UUkFOU0xBVEVfWX0sIDApICR7U1RBUlRfU0NBTEV9YCxcbiAgICAgICAgfSxcbiAgICAgICAgeyBvZmZzZXQ6IDAuNiwgb3BhY2l0eTogMCB9LFxuICAgICAgICB7IG9mZnNldDogMSwgb3BhY2l0eTogMCwgdHJhbnNmb3JtOiBgdHJhbnNsYXRlM2QoJHtFTkRfVFJBTlNMQVRFX1h9LCAke0VORF9UUkFOU0xBVEVfWX0sIDApICR7RU5EX1NDQUxFfWAgfSxcbiAgICBdO1xuICAgIGNvbnN0IEtFWUZSQU1FUyA9IGJhY2tEaXJlY3Rpb24gPyBCQUNLV0FSRFNfS0VZRlJBTUVTIDogRk9SV0FSRFNfS0VZRlJBTUVTO1xuICAgIGNvbnN0IGNsb25lZFRpdGxlRWwgPSBnZXRDbG9uZWRFbGVtZW50KCdpb24tdGl0bGUnKTtcbiAgICBjb25zdCBjbG9uZWRMYXJnZVRpdGxlQW5pbWF0aW9uID0gY3JlYXRlQW5pbWF0aW9uKCk7XG4gICAgY2xvbmVkVGl0bGVFbC5pbm5lclRleHQgPSBsYXJnZVRpdGxlRWwuaW5uZXJUZXh0O1xuICAgIGNsb25lZFRpdGxlRWwuc2l6ZSA9IGxhcmdlVGl0bGVFbC5zaXplO1xuICAgIGNsb25lZFRpdGxlRWwuY29sb3IgPSBsYXJnZVRpdGxlRWwuY29sb3I7XG4gICAgY2xvbmVkTGFyZ2VUaXRsZUFuaW1hdGlvbi5hZGRFbGVtZW50KGNsb25lZFRpdGxlRWwpO1xuICAgIGNsb25lZExhcmdlVGl0bGVBbmltYXRpb25cbiAgICAgICAgLmJlZm9yZVN0eWxlcyh7XG4gICAgICAgICd0cmFuc2Zvcm0tb3JpZ2luJzogYCR7T1JJR0lOX1h9IHRvcGAsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTaW5jZSBmb250IHNpemUgY2hhbmdlcyB3aWxsIGNhdXNlXG4gICAgICAgICAqIHRoZSBkaW1lbnNpb24gb2YgdGhlIGxhcmdlIHRpdGxlIHRvIGNoYW5nZVxuICAgICAgICAgKiB3ZSBuZWVkIHRvIHNldCB0aGUgY2xvbmVkIHRpdGxlIGhlaWdodFxuICAgICAgICAgKiBlcXVhbCB0byB0aGF0IG9mIHRoZSBvcmlnaW5hbCBsYXJnZSB0aXRsZSBoZWlnaHQuXG4gICAgICAgICAqL1xuICAgICAgICBoZWlnaHQ6IGAke2xhcmdlVGl0bGVCb3guaGVpZ2h0fXB4YCxcbiAgICAgICAgZGlzcGxheTogJycsXG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICBbT1JJR0lOX1hdOiBUSVRMRV9TVEFSVF9PRkZTRVQsXG4gICAgfSlcbiAgICAgICAgLmJlZm9yZUFkZFdyaXRlKCgpID0+IHtcbiAgICAgICAgbGFyZ2VUaXRsZUVsLnN0eWxlLnNldFByb3BlcnR5KCdvcGFjaXR5JywgJzAnKTtcbiAgICB9KVxuICAgICAgICAuYWZ0ZXJBZGRXcml0ZSgoKSA9PiB7XG4gICAgICAgIGxhcmdlVGl0bGVFbC5zdHlsZS5zZXRQcm9wZXJ0eSgnb3BhY2l0eScsICcnKTtcbiAgICAgICAgY2xvbmVkVGl0bGVFbC5zdHlsZS5zZXRQcm9wZXJ0eSgnZGlzcGxheScsICdub25lJyk7XG4gICAgfSlcbiAgICAgICAgLmtleWZyYW1lcyhLRVlGUkFNRVMpO1xuICAgIHJvb3RBbmltYXRpb24uYWRkQW5pbWF0aW9uKGNsb25lZExhcmdlVGl0bGVBbmltYXRpb24pO1xufTtcbmNvbnN0IGlvc1RyYW5zaXRpb25BbmltYXRpb24gPSAobmF2RWwsIG9wdHMpID0+IHtcbiAgICB2YXIgX2E7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgRUFTSU5HID0gJ2N1YmljLWJlemllcigwLjMyLDAuNzIsMCwxKSc7XG4gICAgICAgIGNvbnN0IE9QQUNJVFkgPSAnb3BhY2l0eSc7XG4gICAgICAgIGNvbnN0IFRSQU5TRk9STSA9ICd0cmFuc2Zvcm0nO1xuICAgICAgICBjb25zdCBDRU5URVIgPSAnMCUnO1xuICAgICAgICBjb25zdCBPRkZfT1BBQ0lUWSA9IDAuODtcbiAgICAgICAgY29uc3QgaXNSVEwgPSBuYXZFbC5vd25lckRvY3VtZW50LmRpciA9PT0gJ3J0bCc7XG4gICAgICAgIGNvbnN0IE9GRl9SSUdIVCA9IGlzUlRMID8gJy05OS41JScgOiAnOTkuNSUnO1xuICAgICAgICBjb25zdCBPRkZfTEVGVCA9IGlzUlRMID8gJzMzJScgOiAnLTMzJSc7XG4gICAgICAgIGNvbnN0IGVudGVyaW5nRWwgPSBvcHRzLmVudGVyaW5nRWw7XG4gICAgICAgIGNvbnN0IGxlYXZpbmdFbCA9IG9wdHMubGVhdmluZ0VsO1xuICAgICAgICBjb25zdCBiYWNrRGlyZWN0aW9uID0gb3B0cy5kaXJlY3Rpb24gPT09ICdiYWNrJztcbiAgICAgICAgY29uc3QgY29udGVudEVsID0gZW50ZXJpbmdFbC5xdWVyeVNlbGVjdG9yKCc6c2NvcGUgPiBpb24tY29udGVudCcpO1xuICAgICAgICBjb25zdCBoZWFkZXJFbHMgPSBlbnRlcmluZ0VsLnF1ZXJ5U2VsZWN0b3JBbGwoJzpzY29wZSA+IGlvbi1oZWFkZXIgPiAqOm5vdChpb24tdG9vbGJhciksIDpzY29wZSA+IGlvbi1mb290ZXIgPiAqJyk7XG4gICAgICAgIGNvbnN0IGVudGVyaW5nVG9vbEJhckVscyA9IGVudGVyaW5nRWwucXVlcnlTZWxlY3RvckFsbCgnOnNjb3BlID4gaW9uLWhlYWRlciA+IGlvbi10b29sYmFyJyk7XG4gICAgICAgIGNvbnN0IHJvb3RBbmltYXRpb24gPSBjcmVhdGVBbmltYXRpb24oKTtcbiAgICAgICAgY29uc3QgZW50ZXJpbmdDb250ZW50QW5pbWF0aW9uID0gY3JlYXRlQW5pbWF0aW9uKCk7XG4gICAgICAgIHJvb3RBbmltYXRpb25cbiAgICAgICAgICAgIC5hZGRFbGVtZW50KGVudGVyaW5nRWwpXG4gICAgICAgICAgICAuZHVyYXRpb24oKChfYSA9IG9wdHMuZHVyYXRpb24pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IDApIHx8IERVUkFUSU9OKVxuICAgICAgICAgICAgLmVhc2luZyhvcHRzLmVhc2luZyB8fCBFQVNJTkcpXG4gICAgICAgICAgICAuZmlsbCgnYm90aCcpXG4gICAgICAgICAgICAuYmVmb3JlUmVtb3ZlQ2xhc3MoJ2lvbi1wYWdlLWludmlzaWJsZScpO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3ByZWZlci1vcHRpb25hbC1jaGFpblxuICAgICAgICBpZiAobGVhdmluZ0VsICYmIG5hdkVsICE9PSBudWxsICYmIG5hdkVsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IG5hdkRlY29yQW5pbWF0aW9uID0gY3JlYXRlQW5pbWF0aW9uKCk7XG4gICAgICAgICAgICBuYXZEZWNvckFuaW1hdGlvbi5hZGRFbGVtZW50KG5hdkVsKTtcbiAgICAgICAgICAgIHJvb3RBbmltYXRpb24uYWRkQW5pbWF0aW9uKG5hdkRlY29yQW5pbWF0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWNvbnRlbnRFbCAmJiBlbnRlcmluZ1Rvb2xCYXJFbHMubGVuZ3RoID09PSAwICYmIGhlYWRlckVscy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGVudGVyaW5nQ29udGVudEFuaW1hdGlvbi5hZGRFbGVtZW50KGVudGVyaW5nRWwucXVlcnlTZWxlY3RvcignOnNjb3BlID4gLmlvbi1wYWdlLCA6c2NvcGUgPiBpb24tbmF2LCA6c2NvcGUgPiBpb24tdGFicycpKTsgLy8gUkVWSUVXXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBlbnRlcmluZ0NvbnRlbnRBbmltYXRpb24uYWRkRWxlbWVudChjb250ZW50RWwpOyAvLyBSRVZJRVdcbiAgICAgICAgICAgIGVudGVyaW5nQ29udGVudEFuaW1hdGlvbi5hZGRFbGVtZW50KGhlYWRlckVscyk7XG4gICAgICAgIH1cbiAgICAgICAgcm9vdEFuaW1hdGlvbi5hZGRBbmltYXRpb24oZW50ZXJpbmdDb250ZW50QW5pbWF0aW9uKTtcbiAgICAgICAgaWYgKGJhY2tEaXJlY3Rpb24pIHtcbiAgICAgICAgICAgIGVudGVyaW5nQ29udGVudEFuaW1hdGlvblxuICAgICAgICAgICAgICAgIC5iZWZvcmVDbGVhclN0eWxlcyhbT1BBQ0lUWV0pXG4gICAgICAgICAgICAgICAgLmZyb21UbygndHJhbnNmb3JtJywgYHRyYW5zbGF0ZVgoJHtPRkZfTEVGVH0pYCwgYHRyYW5zbGF0ZVgoJHtDRU5URVJ9KWApXG4gICAgICAgICAgICAgICAgLmZyb21UbyhPUEFDSVRZLCBPRkZfT1BBQ0lUWSwgMSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBlbnRlcmluZyBjb250ZW50LCBmb3J3YXJkIGRpcmVjdGlvblxuICAgICAgICAgICAgZW50ZXJpbmdDb250ZW50QW5pbWF0aW9uXG4gICAgICAgICAgICAgICAgLmJlZm9yZUNsZWFyU3R5bGVzKFtPUEFDSVRZXSlcbiAgICAgICAgICAgICAgICAuZnJvbVRvKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlWCgke09GRl9SSUdIVH0pYCwgYHRyYW5zbGF0ZVgoJHtDRU5URVJ9KWApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb250ZW50RWwpIHtcbiAgICAgICAgICAgIGNvbnN0IGVudGVyaW5nVHJhbnNpdGlvbkVmZmVjdEVsID0gc2hhZG93KGNvbnRlbnRFbCkucXVlcnlTZWxlY3RvcignLnRyYW5zaXRpb24tZWZmZWN0Jyk7XG4gICAgICAgICAgICBpZiAoZW50ZXJpbmdUcmFuc2l0aW9uRWZmZWN0RWwpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlbnRlcmluZ1RyYW5zaXRpb25Db3ZlckVsID0gZW50ZXJpbmdUcmFuc2l0aW9uRWZmZWN0RWwucXVlcnlTZWxlY3RvcignLnRyYW5zaXRpb24tY292ZXInKTtcbiAgICAgICAgICAgICAgICBjb25zdCBlbnRlcmluZ1RyYW5zaXRpb25TaGFkb3dFbCA9IGVudGVyaW5nVHJhbnNpdGlvbkVmZmVjdEVsLnF1ZXJ5U2VsZWN0b3IoJy50cmFuc2l0aW9uLXNoYWRvdycpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGVudGVyaW5nVHJhbnNpdGlvbkVmZmVjdCA9IGNyZWF0ZUFuaW1hdGlvbigpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGVudGVyaW5nVHJhbnNpdGlvbkNvdmVyID0gY3JlYXRlQW5pbWF0aW9uKCk7XG4gICAgICAgICAgICAgICAgY29uc3QgZW50ZXJpbmdUcmFuc2l0aW9uU2hhZG93ID0gY3JlYXRlQW5pbWF0aW9uKCk7XG4gICAgICAgICAgICAgICAgZW50ZXJpbmdUcmFuc2l0aW9uRWZmZWN0XG4gICAgICAgICAgICAgICAgICAgIC5hZGRFbGVtZW50KGVudGVyaW5nVHJhbnNpdGlvbkVmZmVjdEVsKVxuICAgICAgICAgICAgICAgICAgICAuYmVmb3JlU3R5bGVzKHsgb3BhY2l0eTogJzEnLCBkaXNwbGF5OiAnYmxvY2snIH0pXG4gICAgICAgICAgICAgICAgICAgIC5hZnRlclN0eWxlcyh7IG9wYWNpdHk6ICcnLCBkaXNwbGF5OiAnJyB9KTtcbiAgICAgICAgICAgICAgICBlbnRlcmluZ1RyYW5zaXRpb25Db3ZlclxuICAgICAgICAgICAgICAgICAgICAuYWRkRWxlbWVudChlbnRlcmluZ1RyYW5zaXRpb25Db3ZlckVsKSAvLyBSRVZJRVdcbiAgICAgICAgICAgICAgICAgICAgLmJlZm9yZUNsZWFyU3R5bGVzKFtPUEFDSVRZXSlcbiAgICAgICAgICAgICAgICAgICAgLmZyb21UbyhPUEFDSVRZLCAwLCAwLjEpO1xuICAgICAgICAgICAgICAgIGVudGVyaW5nVHJhbnNpdGlvblNoYWRvd1xuICAgICAgICAgICAgICAgICAgICAuYWRkRWxlbWVudChlbnRlcmluZ1RyYW5zaXRpb25TaGFkb3dFbCkgLy8gUkVWSUVXXG4gICAgICAgICAgICAgICAgICAgIC5iZWZvcmVDbGVhclN0eWxlcyhbT1BBQ0lUWV0pXG4gICAgICAgICAgICAgICAgICAgIC5mcm9tVG8oT1BBQ0lUWSwgMC4wMywgMC43KTtcbiAgICAgICAgICAgICAgICBlbnRlcmluZ1RyYW5zaXRpb25FZmZlY3QuYWRkQW5pbWF0aW9uKFtlbnRlcmluZ1RyYW5zaXRpb25Db3ZlciwgZW50ZXJpbmdUcmFuc2l0aW9uU2hhZG93XSk7XG4gICAgICAgICAgICAgICAgZW50ZXJpbmdDb250ZW50QW5pbWF0aW9uLmFkZEFuaW1hdGlvbihbZW50ZXJpbmdUcmFuc2l0aW9uRWZmZWN0XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZW50ZXJpbmdDb250ZW50SGFzTGFyZ2VUaXRsZSA9IGVudGVyaW5nRWwucXVlcnlTZWxlY3RvcignaW9uLWhlYWRlci5oZWFkZXItY29sbGFwc2UtY29uZGVuc2UnKTtcbiAgICAgICAgY29uc3QgeyBmb3J3YXJkLCBiYWNrd2FyZCB9ID0gY3JlYXRlTGFyZ2VUaXRsZVRyYW5zaXRpb24ocm9vdEFuaW1hdGlvbiwgaXNSVEwsIGJhY2tEaXJlY3Rpb24sIGVudGVyaW5nRWwsIGxlYXZpbmdFbCk7XG4gICAgICAgIGVudGVyaW5nVG9vbEJhckVscy5mb3JFYWNoKChlbnRlcmluZ1Rvb2xCYXJFbCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZW50ZXJpbmdUb29sQmFyID0gY3JlYXRlQW5pbWF0aW9uKCk7XG4gICAgICAgICAgICBlbnRlcmluZ1Rvb2xCYXIuYWRkRWxlbWVudChlbnRlcmluZ1Rvb2xCYXJFbCk7XG4gICAgICAgICAgICByb290QW5pbWF0aW9uLmFkZEFuaW1hdGlvbihlbnRlcmluZ1Rvb2xCYXIpO1xuICAgICAgICAgICAgY29uc3QgZW50ZXJpbmdUaXRsZSA9IGNyZWF0ZUFuaW1hdGlvbigpO1xuICAgICAgICAgICAgZW50ZXJpbmdUaXRsZS5hZGRFbGVtZW50KGVudGVyaW5nVG9vbEJhckVsLnF1ZXJ5U2VsZWN0b3IoJ2lvbi10aXRsZScpKTsgLy8gUkVWSUVXXG4gICAgICAgICAgICBjb25zdCBlbnRlcmluZ1Rvb2xCYXJCdXR0b25zID0gY3JlYXRlQW5pbWF0aW9uKCk7XG4gICAgICAgICAgICBjb25zdCBidXR0b25zID0gQXJyYXkuZnJvbShlbnRlcmluZ1Rvb2xCYXJFbC5xdWVyeVNlbGVjdG9yQWxsKCdpb24tYnV0dG9ucyxbbWVudVRvZ2dsZV0nKSk7XG4gICAgICAgICAgICBjb25zdCBwYXJlbnRIZWFkZXIgPSBlbnRlcmluZ1Rvb2xCYXJFbC5jbG9zZXN0KCdpb24taGVhZGVyJyk7XG4gICAgICAgICAgICBjb25zdCBpbmFjdGl2ZUhlYWRlciA9IHBhcmVudEhlYWRlciA9PT0gbnVsbCB8fCBwYXJlbnRIZWFkZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhcmVudEhlYWRlci5jbGFzc0xpc3QuY29udGFpbnMoJ2hlYWRlci1jb2xsYXBzZS1jb25kZW5zZS1pbmFjdGl2ZScpO1xuICAgICAgICAgICAgbGV0IGJ1dHRvbnNUb0FuaW1hdGU7XG4gICAgICAgICAgICBpZiAoYmFja0RpcmVjdGlvbikge1xuICAgICAgICAgICAgICAgIGJ1dHRvbnNUb0FuaW1hdGUgPSBidXR0b25zLmZpbHRlcigoYnV0dG9uKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlzQ29sbGFwc2VCdXR0b24gPSBidXR0b24uY2xhc3NMaXN0LmNvbnRhaW5zKCdidXR0b25zLWNvbGxhcHNlJyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoaXNDb2xsYXBzZUJ1dHRvbiAmJiAhaW5hY3RpdmVIZWFkZXIpIHx8ICFpc0NvbGxhcHNlQnV0dG9uO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgYnV0dG9uc1RvQW5pbWF0ZSA9IGJ1dHRvbnMuZmlsdGVyKChidXR0b24pID0+ICFidXR0b24uY2xhc3NMaXN0LmNvbnRhaW5zKCdidXR0b25zLWNvbGxhcHNlJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZW50ZXJpbmdUb29sQmFyQnV0dG9ucy5hZGRFbGVtZW50KGJ1dHRvbnNUb0FuaW1hdGUpO1xuICAgICAgICAgICAgY29uc3QgZW50ZXJpbmdUb29sQmFySXRlbXMgPSBjcmVhdGVBbmltYXRpb24oKTtcbiAgICAgICAgICAgIGVudGVyaW5nVG9vbEJhckl0ZW1zLmFkZEVsZW1lbnQoZW50ZXJpbmdUb29sQmFyRWwucXVlcnlTZWxlY3RvckFsbCgnOnNjb3BlID4gKjpub3QoaW9uLXRpdGxlKTpub3QoaW9uLWJ1dHRvbnMpOm5vdChbbWVudVRvZ2dsZV0pJykpO1xuICAgICAgICAgICAgY29uc3QgZW50ZXJpbmdUb29sQmFyQmcgPSBjcmVhdGVBbmltYXRpb24oKTtcbiAgICAgICAgICAgIGVudGVyaW5nVG9vbEJhckJnLmFkZEVsZW1lbnQoc2hhZG93KGVudGVyaW5nVG9vbEJhckVsKS5xdWVyeVNlbGVjdG9yKCcudG9vbGJhci1iYWNrZ3JvdW5kJykpOyAvLyBSRVZJRVdcbiAgICAgICAgICAgIGNvbnN0IGVudGVyaW5nQmFja0J1dHRvbiA9IGNyZWF0ZUFuaW1hdGlvbigpO1xuICAgICAgICAgICAgY29uc3QgYmFja0J1dHRvbkVsID0gZW50ZXJpbmdUb29sQmFyRWwucXVlcnlTZWxlY3RvcignaW9uLWJhY2stYnV0dG9uJyk7XG4gICAgICAgICAgICBpZiAoYmFja0J1dHRvbkVsKSB7XG4gICAgICAgICAgICAgICAgZW50ZXJpbmdCYWNrQnV0dG9uLmFkZEVsZW1lbnQoYmFja0J1dHRvbkVsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVudGVyaW5nVG9vbEJhci5hZGRBbmltYXRpb24oW1xuICAgICAgICAgICAgICAgIGVudGVyaW5nVGl0bGUsXG4gICAgICAgICAgICAgICAgZW50ZXJpbmdUb29sQmFyQnV0dG9ucyxcbiAgICAgICAgICAgICAgICBlbnRlcmluZ1Rvb2xCYXJJdGVtcyxcbiAgICAgICAgICAgICAgICBlbnRlcmluZ1Rvb2xCYXJCZyxcbiAgICAgICAgICAgICAgICBlbnRlcmluZ0JhY2tCdXR0b24sXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIGVudGVyaW5nVG9vbEJhckJ1dHRvbnMuZnJvbVRvKE9QQUNJVFksIDAuMDEsIDEpO1xuICAgICAgICAgICAgZW50ZXJpbmdUb29sQmFySXRlbXMuZnJvbVRvKE9QQUNJVFksIDAuMDEsIDEpO1xuICAgICAgICAgICAgaWYgKGJhY2tEaXJlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICBpZiAoIWluYWN0aXZlSGVhZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGVudGVyaW5nVGl0bGVcbiAgICAgICAgICAgICAgICAgICAgICAgIC5mcm9tVG8oJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGVYKCR7T0ZGX0xFRlR9KWAsIGB0cmFuc2xhdGVYKCR7Q0VOVEVSfSlgKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmZyb21UbyhPUEFDSVRZLCAwLjAxLCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZW50ZXJpbmdUb29sQmFySXRlbXMuZnJvbVRvKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlWCgke09GRl9MRUZUfSlgLCBgdHJhbnNsYXRlWCgke0NFTlRFUn0pYCk7XG4gICAgICAgICAgICAgICAgLy8gYmFjayBkaXJlY3Rpb24sIGVudGVyaW5nIHBhZ2UgaGFzIGEgYmFjayBidXR0b25cbiAgICAgICAgICAgICAgICBlbnRlcmluZ0JhY2tCdXR0b24uZnJvbVRvKE9QQUNJVFksIDAuMDEsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gZW50ZXJpbmcgdG9vbGJhciwgZm9yd2FyZCBkaXJlY3Rpb25cbiAgICAgICAgICAgICAgICBpZiAoIWVudGVyaW5nQ29udGVudEhhc0xhcmdlVGl0bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZW50ZXJpbmdUaXRsZVxuICAgICAgICAgICAgICAgICAgICAgICAgLmZyb21UbygndHJhbnNmb3JtJywgYHRyYW5zbGF0ZVgoJHtPRkZfUklHSFR9KWAsIGB0cmFuc2xhdGVYKCR7Q0VOVEVSfSlgKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmZyb21UbyhPUEFDSVRZLCAwLjAxLCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZW50ZXJpbmdUb29sQmFySXRlbXMuZnJvbVRvKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlWCgke09GRl9SSUdIVH0pYCwgYHRyYW5zbGF0ZVgoJHtDRU5URVJ9KWApO1xuICAgICAgICAgICAgICAgIGVudGVyaW5nVG9vbEJhckJnLmJlZm9yZUNsZWFyU3R5bGVzKFtPUEFDSVRZLCAndHJhbnNmb3JtJ10pO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRyYW5zbHVjZW50SGVhZGVyID0gcGFyZW50SGVhZGVyID09PSBudWxsIHx8IHBhcmVudEhlYWRlciA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFyZW50SGVhZGVyLnRyYW5zbHVjZW50O1xuICAgICAgICAgICAgICAgIGlmICghdHJhbnNsdWNlbnRIZWFkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgZW50ZXJpbmdUb29sQmFyQmcuZnJvbVRvKE9QQUNJVFksIDAuMDEsICd2YXIoLS1vcGFjaXR5KScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZW50ZXJpbmdUb29sQmFyQmcuZnJvbVRvKCd0cmFuc2Zvcm0nLCBpc1JUTCA/ICd0cmFuc2xhdGVYKC0xMDAlKScgOiAndHJhbnNsYXRlWCgxMDAlKScsICd0cmFuc2xhdGVYKDBweCknKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gZm9yd2FyZCBkaXJlY3Rpb24sIGVudGVyaW5nIHBhZ2UgaGFzIGEgYmFjayBidXR0b25cbiAgICAgICAgICAgICAgICBpZiAoIWZvcndhcmQpIHtcbiAgICAgICAgICAgICAgICAgICAgZW50ZXJpbmdCYWNrQnV0dG9uLmZyb21UbyhPUEFDSVRZLCAwLjAxLCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGJhY2tCdXR0b25FbCAmJiAhZm9yd2FyZCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBlbnRlcmluZ0JhY2tCdG5UZXh0ID0gY3JlYXRlQW5pbWF0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIGVudGVyaW5nQmFja0J0blRleHRcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRFbGVtZW50KHNoYWRvdyhiYWNrQnV0dG9uRWwpLnF1ZXJ5U2VsZWN0b3IoJy5idXR0b24tdGV4dCcpKSAvLyBSRVZJRVdcbiAgICAgICAgICAgICAgICAgICAgICAgIC5mcm9tVG8oYHRyYW5zZm9ybWAsIGlzUlRMID8gJ3RyYW5zbGF0ZVgoLTEwMHB4KScgOiAndHJhbnNsYXRlWCgxMDBweCknLCAndHJhbnNsYXRlWCgwcHgpJyk7XG4gICAgICAgICAgICAgICAgICAgIGVudGVyaW5nVG9vbEJhci5hZGRBbmltYXRpb24oZW50ZXJpbmdCYWNrQnRuVGV4dCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gc2V0dXAgbGVhdmluZyB2aWV3XG4gICAgICAgIGlmIChsZWF2aW5nRWwpIHtcbiAgICAgICAgICAgIGNvbnN0IGxlYXZpbmdDb250ZW50ID0gY3JlYXRlQW5pbWF0aW9uKCk7XG4gICAgICAgICAgICBjb25zdCBsZWF2aW5nQ29udGVudEVsID0gbGVhdmluZ0VsLnF1ZXJ5U2VsZWN0b3IoJzpzY29wZSA+IGlvbi1jb250ZW50Jyk7XG4gICAgICAgICAgICBjb25zdCBsZWF2aW5nVG9vbEJhckVscyA9IGxlYXZpbmdFbC5xdWVyeVNlbGVjdG9yQWxsKCc6c2NvcGUgPiBpb24taGVhZGVyID4gaW9uLXRvb2xiYXInKTtcbiAgICAgICAgICAgIGNvbnN0IGxlYXZpbmdIZWFkZXJFbHMgPSBsZWF2aW5nRWwucXVlcnlTZWxlY3RvckFsbCgnOnNjb3BlID4gaW9uLWhlYWRlciA+ICo6bm90KGlvbi10b29sYmFyKSwgOnNjb3BlID4gaW9uLWZvb3RlciA+IConKTtcbiAgICAgICAgICAgIGlmICghbGVhdmluZ0NvbnRlbnRFbCAmJiBsZWF2aW5nVG9vbEJhckVscy5sZW5ndGggPT09IDAgJiYgbGVhdmluZ0hlYWRlckVscy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICBsZWF2aW5nQ29udGVudC5hZGRFbGVtZW50KGxlYXZpbmdFbC5xdWVyeVNlbGVjdG9yKCc6c2NvcGUgPiAuaW9uLXBhZ2UsIDpzY29wZSA+IGlvbi1uYXYsIDpzY29wZSA+IGlvbi10YWJzJykpOyAvLyBSRVZJRVdcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGxlYXZpbmdDb250ZW50LmFkZEVsZW1lbnQobGVhdmluZ0NvbnRlbnRFbCk7IC8vIFJFVklFV1xuICAgICAgICAgICAgICAgIGxlYXZpbmdDb250ZW50LmFkZEVsZW1lbnQobGVhdmluZ0hlYWRlckVscyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByb290QW5pbWF0aW9uLmFkZEFuaW1hdGlvbihsZWF2aW5nQ29udGVudCk7XG4gICAgICAgICAgICBpZiAoYmFja0RpcmVjdGlvbikge1xuICAgICAgICAgICAgICAgIC8vIGxlYXZpbmcgY29udGVudCwgYmFjayBkaXJlY3Rpb25cbiAgICAgICAgICAgICAgICBsZWF2aW5nQ29udGVudFxuICAgICAgICAgICAgICAgICAgICAuYmVmb3JlQ2xlYXJTdHlsZXMoW09QQUNJVFldKVxuICAgICAgICAgICAgICAgICAgICAuZnJvbVRvKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlWCgke0NFTlRFUn0pYCwgaXNSVEwgPyAndHJhbnNsYXRlWCgtMTAwJSknIDogJ3RyYW5zbGF0ZVgoMTAwJSknKTtcbiAgICAgICAgICAgICAgICBjb25zdCBsZWF2aW5nUGFnZSA9IGdldElvblBhZ2VFbGVtZW50KGxlYXZpbmdFbCk7XG4gICAgICAgICAgICAgICAgcm9vdEFuaW1hdGlvbi5hZnRlckFkZFdyaXRlKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJvb3RBbmltYXRpb24uZ2V0RGlyZWN0aW9uKCkgPT09ICdub3JtYWwnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZWF2aW5nUGFnZS5zdHlsZS5zZXRQcm9wZXJ0eSgnZGlzcGxheScsICdub25lJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGxlYXZpbmcgY29udGVudCwgZm9yd2FyZCBkaXJlY3Rpb25cbiAgICAgICAgICAgICAgICBsZWF2aW5nQ29udGVudFxuICAgICAgICAgICAgICAgICAgICAuZnJvbVRvKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlWCgke0NFTlRFUn0pYCwgYHRyYW5zbGF0ZVgoJHtPRkZfTEVGVH0pYClcbiAgICAgICAgICAgICAgICAgICAgLmZyb21UbyhPUEFDSVRZLCAxLCBPRkZfT1BBQ0lUWSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobGVhdmluZ0NvbnRlbnRFbCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxlYXZpbmdUcmFuc2l0aW9uRWZmZWN0RWwgPSBzaGFkb3cobGVhdmluZ0NvbnRlbnRFbCkucXVlcnlTZWxlY3RvcignLnRyYW5zaXRpb24tZWZmZWN0Jyk7XG4gICAgICAgICAgICAgICAgaWYgKGxlYXZpbmdUcmFuc2l0aW9uRWZmZWN0RWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGVhdmluZ1RyYW5zaXRpb25Db3ZlckVsID0gbGVhdmluZ1RyYW5zaXRpb25FZmZlY3RFbC5xdWVyeVNlbGVjdG9yKCcudHJhbnNpdGlvbi1jb3ZlcicpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsZWF2aW5nVHJhbnNpdGlvblNoYWRvd0VsID0gbGVhdmluZ1RyYW5zaXRpb25FZmZlY3RFbC5xdWVyeVNlbGVjdG9yKCcudHJhbnNpdGlvbi1zaGFkb3cnKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGVhdmluZ1RyYW5zaXRpb25FZmZlY3QgPSBjcmVhdGVBbmltYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGVhdmluZ1RyYW5zaXRpb25Db3ZlciA9IGNyZWF0ZUFuaW1hdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsZWF2aW5nVHJhbnNpdGlvblNoYWRvdyA9IGNyZWF0ZUFuaW1hdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICBsZWF2aW5nVHJhbnNpdGlvbkVmZmVjdFxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZEVsZW1lbnQobGVhdmluZ1RyYW5zaXRpb25FZmZlY3RFbClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5iZWZvcmVTdHlsZXMoeyBvcGFjaXR5OiAnMScsIGRpc3BsYXk6ICdibG9jaycgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZnRlclN0eWxlcyh7IG9wYWNpdHk6ICcnLCBkaXNwbGF5OiAnJyB9KTtcbiAgICAgICAgICAgICAgICAgICAgbGVhdmluZ1RyYW5zaXRpb25Db3ZlclxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZEVsZW1lbnQobGVhdmluZ1RyYW5zaXRpb25Db3ZlckVsKSAvLyBSRVZJRVdcbiAgICAgICAgICAgICAgICAgICAgICAgIC5iZWZvcmVDbGVhclN0eWxlcyhbT1BBQ0lUWV0pXG4gICAgICAgICAgICAgICAgICAgICAgICAuZnJvbVRvKE9QQUNJVFksIDAuMSwgMCk7XG4gICAgICAgICAgICAgICAgICAgIGxlYXZpbmdUcmFuc2l0aW9uU2hhZG93XG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkRWxlbWVudChsZWF2aW5nVHJhbnNpdGlvblNoYWRvd0VsKSAvLyBSRVZJRVdcbiAgICAgICAgICAgICAgICAgICAgICAgIC5iZWZvcmVDbGVhclN0eWxlcyhbT1BBQ0lUWV0pXG4gICAgICAgICAgICAgICAgICAgICAgICAuZnJvbVRvKE9QQUNJVFksIDAuNywgMC4wMyk7XG4gICAgICAgICAgICAgICAgICAgIGxlYXZpbmdUcmFuc2l0aW9uRWZmZWN0LmFkZEFuaW1hdGlvbihbbGVhdmluZ1RyYW5zaXRpb25Db3ZlciwgbGVhdmluZ1RyYW5zaXRpb25TaGFkb3ddKTtcbiAgICAgICAgICAgICAgICAgICAgbGVhdmluZ0NvbnRlbnQuYWRkQW5pbWF0aW9uKFtsZWF2aW5nVHJhbnNpdGlvbkVmZmVjdF0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxlYXZpbmdUb29sQmFyRWxzLmZvckVhY2goKGxlYXZpbmdUb29sQmFyRWwpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBsZWF2aW5nVG9vbEJhciA9IGNyZWF0ZUFuaW1hdGlvbigpO1xuICAgICAgICAgICAgICAgIGxlYXZpbmdUb29sQmFyLmFkZEVsZW1lbnQobGVhdmluZ1Rvb2xCYXJFbCk7XG4gICAgICAgICAgICAgICAgY29uc3QgbGVhdmluZ1RpdGxlID0gY3JlYXRlQW5pbWF0aW9uKCk7XG4gICAgICAgICAgICAgICAgbGVhdmluZ1RpdGxlLmFkZEVsZW1lbnQobGVhdmluZ1Rvb2xCYXJFbC5xdWVyeVNlbGVjdG9yKCdpb24tdGl0bGUnKSk7IC8vIFJFVklFV1xuICAgICAgICAgICAgICAgIGNvbnN0IGxlYXZpbmdUb29sQmFyQnV0dG9ucyA9IGNyZWF0ZUFuaW1hdGlvbigpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGJ1dHRvbnMgPSBsZWF2aW5nVG9vbEJhckVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ2lvbi1idXR0b25zLFttZW51VG9nZ2xlXScpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudEhlYWRlciA9IGxlYXZpbmdUb29sQmFyRWwuY2xvc2VzdCgnaW9uLWhlYWRlcicpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGluYWN0aXZlSGVhZGVyID0gcGFyZW50SGVhZGVyID09PSBudWxsIHx8IHBhcmVudEhlYWRlciA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFyZW50SGVhZGVyLmNsYXNzTGlzdC5jb250YWlucygnaGVhZGVyLWNvbGxhcHNlLWNvbmRlbnNlLWluYWN0aXZlJyk7XG4gICAgICAgICAgICAgICAgY29uc3QgYnV0dG9uc1RvQW5pbWF0ZSA9IEFycmF5LmZyb20oYnV0dG9ucykuZmlsdGVyKChidXR0b24pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXNDb2xsYXBzZUJ1dHRvbiA9IGJ1dHRvbi5jbGFzc0xpc3QuY29udGFpbnMoJ2J1dHRvbnMtY29sbGFwc2UnKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChpc0NvbGxhcHNlQnV0dG9uICYmICFpbmFjdGl2ZUhlYWRlcikgfHwgIWlzQ29sbGFwc2VCdXR0b247XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgbGVhdmluZ1Rvb2xCYXJCdXR0b25zLmFkZEVsZW1lbnQoYnV0dG9uc1RvQW5pbWF0ZSk7XG4gICAgICAgICAgICAgICAgY29uc3QgbGVhdmluZ1Rvb2xCYXJJdGVtcyA9IGNyZWF0ZUFuaW1hdGlvbigpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxlYXZpbmdUb29sQmFySXRlbUVscyA9IGxlYXZpbmdUb29sQmFyRWwucXVlcnlTZWxlY3RvckFsbCgnOnNjb3BlID4gKjpub3QoaW9uLXRpdGxlKTpub3QoaW9uLWJ1dHRvbnMpOm5vdChbbWVudVRvZ2dsZV0pJyk7XG4gICAgICAgICAgICAgICAgaWYgKGxlYXZpbmdUb29sQmFySXRlbUVscy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGxlYXZpbmdUb29sQmFySXRlbXMuYWRkRWxlbWVudChsZWF2aW5nVG9vbEJhckl0ZW1FbHMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBsZWF2aW5nVG9vbEJhckJnID0gY3JlYXRlQW5pbWF0aW9uKCk7XG4gICAgICAgICAgICAgICAgbGVhdmluZ1Rvb2xCYXJCZy5hZGRFbGVtZW50KHNoYWRvdyhsZWF2aW5nVG9vbEJhckVsKS5xdWVyeVNlbGVjdG9yKCcudG9vbGJhci1iYWNrZ3JvdW5kJykpOyAvLyBSRVZJRVdcbiAgICAgICAgICAgICAgICBjb25zdCBsZWF2aW5nQmFja0J1dHRvbiA9IGNyZWF0ZUFuaW1hdGlvbigpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGJhY2tCdXR0b25FbCA9IGxlYXZpbmdUb29sQmFyRWwucXVlcnlTZWxlY3RvcignaW9uLWJhY2stYnV0dG9uJyk7XG4gICAgICAgICAgICAgICAgaWYgKGJhY2tCdXR0b25FbCkge1xuICAgICAgICAgICAgICAgICAgICBsZWF2aW5nQmFja0J1dHRvbi5hZGRFbGVtZW50KGJhY2tCdXR0b25FbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxlYXZpbmdUb29sQmFyLmFkZEFuaW1hdGlvbihbXG4gICAgICAgICAgICAgICAgICAgIGxlYXZpbmdUaXRsZSxcbiAgICAgICAgICAgICAgICAgICAgbGVhdmluZ1Rvb2xCYXJCdXR0b25zLFxuICAgICAgICAgICAgICAgICAgICBsZWF2aW5nVG9vbEJhckl0ZW1zLFxuICAgICAgICAgICAgICAgICAgICBsZWF2aW5nQmFja0J1dHRvbixcbiAgICAgICAgICAgICAgICAgICAgbGVhdmluZ1Rvb2xCYXJCZyxcbiAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICByb290QW5pbWF0aW9uLmFkZEFuaW1hdGlvbihsZWF2aW5nVG9vbEJhcik7XG4gICAgICAgICAgICAgICAgLy8gZmFkZSBvdXQgbGVhdmluZyB0b29sYmFyIGl0ZW1zXG4gICAgICAgICAgICAgICAgbGVhdmluZ0JhY2tCdXR0b24uZnJvbVRvKE9QQUNJVFksIDAuOTksIDApO1xuICAgICAgICAgICAgICAgIGxlYXZpbmdUb29sQmFyQnV0dG9ucy5mcm9tVG8oT1BBQ0lUWSwgMC45OSwgMCk7XG4gICAgICAgICAgICAgICAgbGVhdmluZ1Rvb2xCYXJJdGVtcy5mcm9tVG8oT1BBQ0lUWSwgMC45OSwgMCk7XG4gICAgICAgICAgICAgICAgaWYgKGJhY2tEaXJlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpbmFjdGl2ZUhlYWRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGVhdmluZyB0b29sYmFyLCBiYWNrIGRpcmVjdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgbGVhdmluZ1RpdGxlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZyb21UbygndHJhbnNmb3JtJywgYHRyYW5zbGF0ZVgoJHtDRU5URVJ9KWAsIGlzUlRMID8gJ3RyYW5zbGF0ZVgoLTEwMCUpJyA6ICd0cmFuc2xhdGVYKDEwMCUpJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZnJvbVRvKE9QQUNJVFksIDAuOTksIDApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGxlYXZpbmdUb29sQmFySXRlbXMuZnJvbVRvKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlWCgke0NFTlRFUn0pYCwgaXNSVEwgPyAndHJhbnNsYXRlWCgtMTAwJSknIDogJ3RyYW5zbGF0ZVgoMTAwJSknKTtcbiAgICAgICAgICAgICAgICAgICAgbGVhdmluZ1Rvb2xCYXJCZy5iZWZvcmVDbGVhclN0eWxlcyhbT1BBQ0lUWSwgJ3RyYW5zZm9ybSddKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gbGVhdmluZyB0b29sYmFyLCBiYWNrIGRpcmVjdGlvbiwgYW5kIHRoZXJlJ3Mgbm8gZW50ZXJpbmcgdG9vbGJhclxuICAgICAgICAgICAgICAgICAgICAvLyBzaG91bGQganVzdCBzbGlkZSBvdXQsIG5vIGZhZGluZyBvdXRcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdHJhbnNsdWNlbnRIZWFkZXIgPSBwYXJlbnRIZWFkZXIgPT09IG51bGwgfHwgcGFyZW50SGVhZGVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYXJlbnRIZWFkZXIudHJhbnNsdWNlbnQ7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdHJhbnNsdWNlbnRIZWFkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlYXZpbmdUb29sQmFyQmcuZnJvbVRvKE9QQUNJVFksICd2YXIoLS1vcGFjaXR5KScsIDApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGVhdmluZ1Rvb2xCYXJCZy5mcm9tVG8oJ3RyYW5zZm9ybScsICd0cmFuc2xhdGVYKDBweCknLCBpc1JUTCA/ICd0cmFuc2xhdGVYKC0xMDAlKScgOiAndHJhbnNsYXRlWCgxMDAlKScpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChiYWNrQnV0dG9uRWwgJiYgIWJhY2t3YXJkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsZWF2aW5nQmFja0J0blRleHQgPSBjcmVhdGVBbmltYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlYXZpbmdCYWNrQnRuVGV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRFbGVtZW50KHNoYWRvdyhiYWNrQnV0dG9uRWwpLnF1ZXJ5U2VsZWN0b3IoJy5idXR0b24tdGV4dCcpKSAvLyBSRVZJRVdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZnJvbVRvKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlWCgke0NFTlRFUn0pYCwgYHRyYW5zbGF0ZVgoJHsoaXNSVEwgPyAtMTI0IDogMTI0KSArICdweCd9KWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGVhdmluZ1Rvb2xCYXIuYWRkQW5pbWF0aW9uKGxlYXZpbmdCYWNrQnRuVGV4dCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGxlYXZpbmcgdG9vbGJhciwgZm9yd2FyZCBkaXJlY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpbmFjdGl2ZUhlYWRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGVhdmluZ1RpdGxlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZyb21UbygndHJhbnNmb3JtJywgYHRyYW5zbGF0ZVgoJHtDRU5URVJ9KWAsIGB0cmFuc2xhdGVYKCR7T0ZGX0xFRlR9KWApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZyb21UbyhPUEFDSVRZLCAwLjk5LCAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hZnRlckNsZWFyU3R5bGVzKFtUUkFOU0ZPUk0sIE9QQUNJVFldKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBsZWF2aW5nVG9vbEJhckl0ZW1zXG4gICAgICAgICAgICAgICAgICAgICAgICAuZnJvbVRvKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlWCgke0NFTlRFUn0pYCwgYHRyYW5zbGF0ZVgoJHtPRkZfTEVGVH0pYClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZnRlckNsZWFyU3R5bGVzKFtUUkFOU0ZPUk0sIE9QQUNJVFldKTtcbiAgICAgICAgICAgICAgICAgICAgbGVhdmluZ0JhY2tCdXR0b24uYWZ0ZXJDbGVhclN0eWxlcyhbT1BBQ0lUWV0pO1xuICAgICAgICAgICAgICAgICAgICBsZWF2aW5nVGl0bGUuYWZ0ZXJDbGVhclN0eWxlcyhbT1BBQ0lUWV0pO1xuICAgICAgICAgICAgICAgICAgICBsZWF2aW5nVG9vbEJhckJ1dHRvbnMuYWZ0ZXJDbGVhclN0eWxlcyhbT1BBQ0lUWV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByb290QW5pbWF0aW9uO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHRocm93IGVycjtcbiAgICB9XG59O1xuLyoqXG4gKiBUaGUgc2NhbGUgb2YgdGhlIGJhY2sgYnV0dG9uIGR1cmluZyB0aGUgYW5pbWF0aW9uXG4gKiBpcyBjb21wdXRlZCBiYXNlZCBvbiB0aGUgc2NhbGUgb2YgdGhlIGxhcmdlIHRpdGxlXG4gKiBhbmQgdmljZSB2ZXJzYS4gSG93ZXZlciwgd2UgbmVlZCB0byBhY2NvdW50IGZvciBzbGlnaHRcbiAqIHZhcmlhdGlvbnMgaW4gdGhlIHNpemUgb2YgdGhlIGxhcmdlIHRpdGxlIGR1ZSB0b1xuICogcGFkZGluZyBhbmQgZm9udCB3ZWlnaHQuIFRoaXMgdmFsdWUgc2hvdWxkIGJlIHVzZWQgdG8gc3VidHJhY3RcbiAqIGEgc21hbGwgYW1vdW50IGZyb20gdGhlIGxhcmdlIHRpdGxlIGhlaWdodCB3aGVuIGNvbXB1dGluZyBzY2FsZXNcbiAqIHRvIGdldCBtb3JlIGFjY3VyYXRlIHNjYWxlIHJlc3VsdHMuXG4gKi9cbmNvbnN0IExBUkdFX1RJVExFX1NJWkVfT0ZGU0VUID0gMTA7XG5cbmV4cG9ydCB7IGlvc1RyYW5zaXRpb25BbmltYXRpb24sIHNoYWRvdyB9O1xuIl0sIm5hbWVzIjpbImRvVGl0bGVBbmRCdXR0b25UZXh0c01hdGNoIiwiX2EiLCJiYWNrQnV0dG9uVGV4dEVsIiwidGV4dENvbnRlbnQiLCJ0cmltIiwiX2IiLCJsYXJnZVRpdGxlRWwiLCJXSURUSF9TQ0FMRSIsImxhcmdlVGl0bGVUZXh0Qm94Iiwid2lkdGgiLCJiYWNrQnV0dG9uVGV4dEJveCIsIkhFSUdIVF9TQ0FMRSIsImhlaWdodCIsIkxBUkdFX1RJVExFX1NJWkVfT0ZGU0VUIiwiVEVYVF9TVEFSVF9TQ0FMRSIsImJhY2tCdXR0b25JY29uQm94Iiwic2hhZG93IiwiYmFja0J1dHRvbkVsIiwicXVlcnlTZWxlY3RvciIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsIkNPTlRBSU5FUl9TVEFSVF9UUkFOU0xBVEVfWCIsInJ0bCIsInJpZ2h0IiwiYmFja0J1dHRvbkJveCIsImxlZnQiLCJDT05UQUlORVJfRU5EX1RSQU5TTEFURV9YIiwid2luZG93IiwiaW5uZXJXaWR0aCIsIkNPTlRBSU5FUl9TVEFSVF9UUkFOU0xBVEVfWSIsInRvcCIsIkNPTlRBSU5FUl9FTkRfVFJBTlNMQVRFX1kiLCJDT05UQUlORVJfS0VZRlJBTUVTIiwiYmFja0RpcmVjdGlvbiIsIm9mZnNldCIsInRyYW5zZm9ybSIsIlRFWFRfS0VZRlJBTUVTIiwib3BhY2l0eSIsIlRFWFRfRU5EX1NDQUxFIiwiSUNPTl9LRVlGUkFNRVMiLCJlbnRlcmluZ0JhY2tCdXR0b25UZXh0QW5pbWF0aW9uIiwiY3JlYXRlQW5pbWF0aW9uIiwiZW50ZXJpbmdCYWNrQnV0dG9uSWNvbkFuaW1hdGlvbiIsImVudGVyaW5nQmFja0J1dHRvbkFuaW1hdGlvbiIsImNsb25lZEJhY2tCdXR0b25FbCIsImdldENsb25lZEVsZW1lbnQiLCJjbG9uZWRCYWNrQnV0dG9uVGV4dEVsIiwiY2xvbmVkQmFja0J1dHRvbkljb25FbCIsInRleHQiLCJtb2RlIiwiaWNvbiIsImNvbG9yIiwiZGlzYWJsZWQiLCJzdHlsZSIsInNldFByb3BlcnR5IiwiYWRkRWxlbWVudCIsImJlZm9yZVN0eWxlcyIsInBvc2l0aW9uIiwiQ09OVEFJTkVSX09SSUdJTl9YIiwiYmVmb3JlQWRkV3JpdGUiLCJURVhUX09SSUdJTl9YIiwiQkFDS19CVVRUT05fU1RBUlRfT0ZGU0VUIiwiYWZ0ZXJBZGRXcml0ZSIsInJlbW92ZVByb3BlcnR5Iiwia2V5ZnJhbWVzIiwiSUNPTl9PUklHSU5fWCIsInJvb3RBbmltYXRpb24iLCJhZGRBbmltYXRpb24iLCJhbmltYXRlTGFyZ2VUaXRsZSIsImxhcmdlVGl0bGVCb3giLCJUSVRMRV9TVEFSVF9PRkZTRVQiLCJTVEFSVF9UUkFOU0xBVEVfWSIsIkVORF9UUkFOU0xBVEVfWCIsIngiLCJTVEFSVF9TQ0FMRSIsIkVORF9UUkFOU0xBVEVfWSIsIktFWUZSQU1FUyIsIkVORF9TQ0FMRSIsImNsb25lZFRpdGxlRWwiLCJjbG9uZWRMYXJnZVRpdGxlQW5pbWF0aW9uIiwiaW5uZXJUZXh0Iiwic2l6ZSIsIk9SSUdJTl9YIiwiZGlzcGxheSIsImV4cG9ydHMiLCJuYXZFbCIsIm9wdHMiLCJFQVNJTkciLCJPUEFDSVRZIiwiVFJBTlNGT1JNIiwiQ0VOVEVSIiwiT0ZGX09QQUNJVFkiLCJpc1JUTCIsIm93bmVyRG9jdW1lbnQiLCJkaXIiLCJPRkZfUklHSFQiLCJPRkZfTEVGVCIsImVudGVyaW5nRWwiLCJsZWF2aW5nRWwiLCJkaXJlY3Rpb24iLCJjb250ZW50RWwiLCJoZWFkZXJFbHMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZW50ZXJpbmdUb29sQmFyRWxzIiwiZW50ZXJpbmdDb250ZW50QW5pbWF0aW9uIiwiZHVyYXRpb24iLCJlYXNpbmciLCJmaWxsIiwiYmVmb3JlUmVtb3ZlQ2xhc3MiLCJuYXZEZWNvckFuaW1hdGlvbiIsImxlbmd0aCIsImJlZm9yZUNsZWFyU3R5bGVzIiwiZnJvbVRvIiwiZW50ZXJpbmdUcmFuc2l0aW9uRWZmZWN0RWwiLCJlbnRlcmluZ1RyYW5zaXRpb25Db3ZlckVsIiwiZW50ZXJpbmdUcmFuc2l0aW9uU2hhZG93RWwiLCJlbnRlcmluZ1RyYW5zaXRpb25FZmZlY3QiLCJlbnRlcmluZ1RyYW5zaXRpb25Db3ZlciIsImVudGVyaW5nVHJhbnNpdGlvblNoYWRvdyIsImFmdGVyU3R5bGVzIiwiZW50ZXJpbmdDb250ZW50SGFzTGFyZ2VUaXRsZSIsImZvcndhcmQiLCJiYWNrd2FyZCIsImNyZWF0ZUxhcmdlVGl0bGVUcmFuc2l0aW9uIiwiZm9yRWFjaCIsImVudGVyaW5nVG9vbEJhckVsIiwiZW50ZXJpbmdUb29sQmFyIiwiZW50ZXJpbmdUaXRsZSIsIkFycmF5IiwiZnJvbSIsInBhcmVudEhlYWRlciIsImNsb3Nlc3QiLCJpbmFjdGl2ZUhlYWRlciIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwiYnV0dG9uc1RvQW5pbWF0ZSIsImJ1dHRvbnMiLCJmaWx0ZXIiLCJidXR0b24iLCJpc0NvbGxhcHNlQnV0dG9uIiwiZW50ZXJpbmdUb29sQmFyQnV0dG9ucyIsImVudGVyaW5nVG9vbEJhckl0ZW1zIiwiZW50ZXJpbmdUb29sQmFyQmciLCJlbnRlcmluZ0JhY2tCdXR0b24iLCJ0cmFuc2x1Y2VudCIsImVudGVyaW5nQmFja0J0blRleHQiLCJsZWF2aW5nQ29udGVudCIsImxlYXZpbmdDb250ZW50RWwiLCJsZWF2aW5nVG9vbEJhckVscyIsImxlYXZpbmdIZWFkZXJFbHMiLCJsZWF2aW5nUGFnZSIsImdldElvblBhZ2VFbGVtZW50IiwiZ2V0RGlyZWN0aW9uIiwibGVhdmluZ1RyYW5zaXRpb25FZmZlY3RFbCIsImxlYXZpbmdUcmFuc2l0aW9uQ292ZXJFbCIsImxlYXZpbmdUcmFuc2l0aW9uU2hhZG93RWwiLCJsZWF2aW5nVHJhbnNpdGlvbkVmZmVjdCIsImxlYXZpbmdUcmFuc2l0aW9uQ292ZXIiLCJsZWF2aW5nVHJhbnNpdGlvblNoYWRvdyIsImxlYXZpbmdUb29sQmFyRWwiLCJsZWF2aW5nVG9vbEJhciIsImxlYXZpbmdUaXRsZSIsImxlYXZpbmdUb29sQmFyQnV0dG9ucyIsImxlYXZpbmdUb29sQmFySXRlbXMiLCJsZWF2aW5nVG9vbEJhckl0ZW1FbHMiLCJsZWF2aW5nVG9vbEJhckJnIiwibGVhdmluZ0JhY2tCdXR0b24iLCJsZWF2aW5nQmFja0J0blRleHQiLCJhZnRlckNsZWFyU3R5bGVzIiwiZXJyIl0sIm1hcHBpbmdzIjoiOzs7O3FvQ0FBQSxNQUFBQSxHQUFBLFFBQUFDLEVBQUFDLEVBQUFDLG1CQUFBLElBQUFGLE9BQUEsRUFBQUEsRUFBQUcsV0FBQSxRQUFBQyxFQUFBQyxFQUFBSCxtQkFBQSxJQUFBRSxPQUFBLEVBQUFBLEVBQUFELFFBQUFHLEVBQUFDLEVBQUFDLE1BQUFDLEVBQUFELE1BS0FFLEdBQUFILEVBQUFJLE9BQUFDLEdBQUFILEVBQUFFLE9BR3NCRSxFQUFJZCxFQUFZLFNBQUFPLE1BQUFJLEtBQUEsU0FBQUEsSUFBQSxDQUFBLE1BQUFJLEVBQUFDLEVBQUFDLEdBQUFDLGNBQUEsWUFBQUMsd0JBS3BDQyxFQUFBQyxFQUFBTixFQUFBTixNQUFBLEdBQUFNLEVBQUFPLE1BQUFDLEVBQUFELE9BQUEsS0FBQUMsRUFBQUMsS0FBQVQsRUFBQU4sTUFBQSxFQUFBLEtBQUFnQixFQUFBSixFQUFBLElBQUFLLE9BQUFDLFdBQUFKLEVBQUFELFVBQUEsR0FBQUMsRUFBQUMsU0FLTUksRUFBb0MsR0FBQXBCLEVBQTREcUIsUUFJdEdDLEVBQUEsR0FBQVAsRUFBQU0sUUFNNkJFLEVBQUFDLEVBQUEsQ0FBQSxDQUFBQyxPQUFBLEVBQUFDLFVBQUEsZUFBQVQsTUFBQUssU0FBQSxDQUFBRyxPQUFBLEVBQUFDLFVBQUEsZUFBQWQsTUFBQVEsVUFBQSxDQUFBLENBQUFLLE9BQUEsRUFBQUMsVUFBQSxlQUFBZCxNQUFBUSxTQUFBLENBQUFLLE9BQUEsRUFBQUMsVUFBQSxlQUFBVCxNQUFBSyxVQU0xQkssRUFBQUgsRUFBQSxDQUFBLENBQUFDLE9BQUEsRUFBQUcsUUFBQSxFQUFBRixVQUFBRyxHQUFBLENBQUFKLE9BQUEsRUFBQUcsUUFBQSxFQUFBRixVQUFB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
