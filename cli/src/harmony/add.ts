import { pathExists, writeFile } from '@ionic/utils-fs';
import { homedir } from 'os';
import { join } from 'path';

import c from '../colors';
import { runTask } from '../common';
import type { Config } from '../definitions';
import { runCommand } from '../util/subprocess';
import { extractTemplate } from '../util/template';

export async function addHarmony(config: Config): Promise<void> {
  await runTask(
    `Adding native harmony project in ${c.strong(config.harmony.platformDir)}`,
    async () => {
      return extractTemplate(
        config.cli.assets.harmony.platformTemplateArchiveAbs,
        config.harmony.platformDirAbs,
      );
    },
  );
}

export async function createLocalProperties(
  platformDir: string,
): Promise<void> {
  // TODO change to harmony sdk path
  const defaultHarmonyPath = join(homedir(), 'Library/Android/sdk');
  if (await pathExists(defaultHarmonyPath)) {
    const localSettings = `
# This file is automatically generated by DevEco Studio.
# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
#
# This file should *NOT* be checked into Version Control Systems,
# as it contains information specific to your local configuration.
#
# For customization when using a Version Control System, please read the header note.



  `;
    await writeFile(join(platformDir, 'local.properties'), localSettings, {
      encoding: 'utf-8',
    });

    // Only sync if we were able to create the local properties above, otherwise
    // this will fail
    try {
      await gradleSync(platformDir);
    } catch (e) {
      console.error('Error running harmony sync', e);
      console.error(
        'Unable to infer default Harmony SDK settings. This is fine, just run npx cap open harmony and sync manually',
      );
    }
  }
}

// TODO 鸿蒙项目有sync，待调整成鸿蒙项目的sync
async function gradleSync(platformDir: string) {
  await runCommand(`./gradlew`, [], {
    cwd: platformDir,
  });
}
